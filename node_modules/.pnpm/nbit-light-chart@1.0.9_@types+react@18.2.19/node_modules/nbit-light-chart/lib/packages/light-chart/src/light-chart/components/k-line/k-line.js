'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var nbitArco = require('nbit-arco');
var React = require('react');
var dayjs = require('dayjs');
var customParseFormat = require('../../../../../../node_modules/.pnpm/dayjs@1.11.3/node_modules/dayjs/plugin/customParseFormat.js');
var isBetween = require('../../../../../../node_modules/.pnpm/dayjs@1.11.3/node_modules/dayjs/plugin/isBetween.js');
var classNames = require('classnames');
var indicator = require('../../util/indicator.js');
require('./k-line.css.js');
var kLineChart = require('./k-line-chart.js');
var theme = require('../../util/theme.js');
var index = require('../../../../../../node_modules/.pnpm/nbit-arco@2.39.0-bate.2_sfoxds7t5ydpegc3knd667wn6m/node_modules/nbit-arco/icon/react-icon/IconRight/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

const TabPane = nbitArco.Tabs.TabPane;
dayjs__default["default"].extend(customParseFormat);
dayjs__default["default"].extend(isBetween);
exports.TimeSharingType = void 0;
(function (TimeSharingType) {
    TimeSharingType["Min"] = "min";
    TimeSharingType["Hour"] = "hour";
    TimeSharingType["Week"] = "week";
    TimeSharingType["Mon"] = "mon";
})(exports.TimeSharingType || (exports.TimeSharingType = {}));
const Option = nbitArco.Select.Option;
const KLine = (props) => {
    const { bgColor, textColor, brandColor, upColor, downColor } = theme.getTheme();
    const [visible, setVisible] = React.useState(false);
    const [curData, setCurData] = React.useState(props?.kLineChartData);
    const [mainIndicator, setMainIndicator] = React.useState({
        checked: true,
        sub: {
            checked: true,
            strip: '1',
            type: 'high',
            color: brandColor,
        },
    });
    const [subIndicator, setSubIndicator] = React.useState({
        checked: false,
        sub: {
            fast: '12',
            slow: '26',
            signal: '1',
            deaChecked: false,
            difChecked: false,
            macdChecked: false,
        },
    });
    const [curTime, setCurTime] = React.useState({
        unit: 'min',
        value: 1,
    });
    React.useEffect(() => {
        if (props.kLineChartData) {
            setCurData(props.kLineChartData);
        }
    }, [props.kLineChartData]);
    const [chartLayoutOptions, setChartLayoutOptions] = React.useState({
        background: {
            color: bgColor,
        },
        textColor,
    });
    React.useEffect(() => {
        const _bgColor = theme.getTheme().bgColor;
        const _textColor = theme.getTheme().textColor;
        setChartLayoutOptions({
            background: {
                color: _bgColor,
            },
            textColor: _textColor,
        });
    }, [props.theme]);
    const minutesList = [1, 3, 5, 15, 30];
    const dayList = [1, 2, 4, 6, 12];
    const timeSharingChange = (value, type) => {
        setCurTime({
            unit: type,
            value,
        });
        const _newData = indicator.updateTimeOfData(value, type, props?.kLineChartData || []);
        setCurData(_newData);
    };
    const updateTecIndicator = () => {
        setVisible(true);
    };
    const closeModal = () => {
        setVisible(false);
    };
    const confirm = () => {
        setVisible(false);
    };
    const mainCheckboxChange = value => {
        setMainIndicator({
            ...mainIndicator,
            checked: value,
        });
    };
    const subMainCheckboxChange = value => {
        setSubIndicator({
            ...subIndicator,
            checked: value,
        });
    };
    const mainSubCheckboxChange = value => {
        setMainIndicator({
            ...mainIndicator,
            sub: {
                ...mainIndicator.sub,
                checked: value,
            },
        });
    };
    const indicatorSelectChange = value => {
        setMainIndicator({
            ...mainIndicator,
            sub: {
                ...mainIndicator.sub,
                type: value,
            },
        });
    };
    const indicatorInputChange = value => {
        setMainIndicator({
            ...mainIndicator,
            sub: {
                ...mainIndicator.sub,
                strip: value,
            },
        });
    };
    const subInputChange = (value, type) => {
        setSubIndicator({
            ...subIndicator,
            sub: {
                ...subIndicator.sub,
                [type]: value,
            },
        });
    };
    const subCheckboxChange = (value, type) => {
        setSubIndicator({
            ...subIndicator,
            sub: {
                ...subIndicator.sub,
                [type]: value,
            },
        });
    };
    const options = [
        {
            value: 'High',
        },
        {
            value: 'Low',
        },
        {
            value: 'Open',
        },
        {
            value: 'Close',
        },
    ];
    return (React__default["default"].createElement("div", { className: "k-line-chart-wrap bg-bg_color" },
        React__default["default"].createElement("div", { className: "k-set-wrap" },
            React__default["default"].createElement(nbitArco.Select, { style: { width: 64 }, defaultValue: minutesList[0], onChange: value => {
                    timeSharingChange(value, exports.TimeSharingType.Min);
                }, className: "bg-bg_sr_color" }, minutesList.map(option => (React__default["default"].createElement(Option, { key: option, value: option },
                React__default["default"].createElement("span", { className: classNames__default["default"]({
                        'text-brand_color': option === curTime.value && curTime.unit === exports.TimeSharingType.Min,
                    }) },
                    option,
                    "\u5206"))))),
            React__default["default"].createElement(nbitArco.Select, { className: "ml-4", style: { width: 64 }, defaultValue: dayList[0], onChange: value => {
                    timeSharingChange(value, exports.TimeSharingType.Hour);
                } }, dayList.map(option => (React__default["default"].createElement(Option, { key: option, value: option },
                React__default["default"].createElement("span", { className: classNames__default["default"]({
                        'text-brand_color': option === curTime.value && curTime.unit === exports.TimeSharingType.Hour,
                    }) },
                    option,
                    "\u65F6"))))),
            React__default["default"].createElement(nbitArco.Button, { className: `ml-4`, onClick: () => timeSharingChange(1, exports.TimeSharingType.Week) },
                React__default["default"].createElement("span", { className: classNames__default["default"]({
                        'text-brand_color': curTime.value === 1 && curTime.unit === exports.TimeSharingType.Week,
                        'text-text_color_01': curTime.value !== 1 || curTime.unit !== exports.TimeSharingType.Week,
                    }) }, `一周`)),
            React__default["default"].createElement(nbitArco.Button, { className: `ml-4`, onClick: () => timeSharingChange(1, exports.TimeSharingType.Mon) },
                React__default["default"].createElement("span", { className: classNames__default["default"]({
                        'text-brand_color': curTime.value === 1 && curTime.unit === exports.TimeSharingType.Mon,
                        'text-text_color_01': curTime.value !== 1 || curTime.unit !== exports.TimeSharingType.Mon,
                    }) }, `一个月`)),
            React__default["default"].createElement(nbitArco.Button, { className: "ml-4 text-text_color_01", onClick: updateTecIndicator }, `技术指标`)),
        React__default["default"].createElement(nbitArco.Modal, { style: { width: 600 }, footer: React__default["default"].createElement("div", { className: "footer-wrap" },
                React__default["default"].createElement(nbitArco.Button, { onClick: closeModal, className: "processing-button" }, `取消`),
                React__default["default"].createElement(nbitArco.Button, { onClick: confirm, className: "processing-button ml-4", type: "primary" }, `确定`)), title: "Indicators", visible: visible, onCancel: () => {
                closeModal();
            } },
            React__default["default"].createElement("div", { className: "modal-wrap" },
                React__default["default"].createElement(nbitArco.Tabs, { defaultActiveTab: "1" },
                    React__default["default"].createElement(TabPane, { key: "1", title: "Main" },
                        React__default["default"].createElement("div", { className: "main-wrap" },
                            React__default["default"].createElement("div", { className: "main" },
                                React__default["default"].createElement("div", null, "Main"),
                                React__default["default"].createElement("div", { className: "mt-4" },
                                    React__default["default"].createElement(nbitArco.Checkbox, { checked: mainIndicator.checked, onChange: mainCheckboxChange }),
                                    React__default["default"].createElement("span", { className: "ml-2" }, "MA"),
                                    React__default["default"].createElement(index, { className: "ml-12" }))),
                            React__default["default"].createElement("div", null,
                                React__default["default"].createElement("div", null, "MA - Moving Average"),
                                React__default["default"].createElement("div", { className: "mt-3" },
                                    React__default["default"].createElement(nbitArco.Checkbox, { checked: mainIndicator.sub.checked, onChange: mainSubCheckboxChange }),
                                    React__default["default"].createElement("span", { className: "ml-2" }, "MA1"),
                                    React__default["default"].createElement(nbitArco.Input, { style: { width: 48 }, className: "ml-4", value: mainIndicator.sub.strip, allowClear: true, placeholder: "Please Enter something", onChange: indicatorInputChange }),
                                    React__default["default"].createElement(nbitArco.Select, { placeholder: "Please select", className: "ml-4", value: mainIndicator.sub.type, style: { width: 120 }, onChange: indicatorSelectChange }, options.map(option => (React__default["default"].createElement(Option, { key: option.value, value: option.value }, option.value)))))))),
                    React__default["default"].createElement(TabPane, { key: "2", title: "Sub" },
                        React__default["default"].createElement("div", { className: "sub-wrap" },
                            React__default["default"].createElement("div", { className: "sub" },
                                React__default["default"].createElement("div", null, "Sub"),
                                React__default["default"].createElement("div", { className: "mt-4" },
                                    React__default["default"].createElement(nbitArco.Checkbox, { checked: subIndicator.checked, onChange: subMainCheckboxChange }),
                                    React__default["default"].createElement("span", { className: "ml-2" }, "MACD"),
                                    React__default["default"].createElement(index, { className: "ml-12" }))),
                            React__default["default"].createElement("div", null,
                                React__default["default"].createElement("div", null, "Moving Average Convergence Divergence"),
                                React__default["default"].createElement("div", { className: "mt-3 sub-set" },
                                    React__default["default"].createElement("div", { className: "set-item" },
                                        React__default["default"].createElement("span", null, "Fast Length"),
                                        React__default["default"].createElement(nbitArco.Input, { style: { width: 120 }, className: "ml-4", value: subIndicator.sub.fast, allowClear: true, placeholder: "Please Enter something", onChange: value => {
                                                subInputChange(value, 'fast');
                                            } })),
                                    React__default["default"].createElement("div", { className: "set-item" },
                                        React__default["default"].createElement("span", null, "Slow Length"),
                                        React__default["default"].createElement(nbitArco.Input, { style: { width: 120 }, className: "ml-4", value: subIndicator.sub.slow, allowClear: true, placeholder: "Please Enter something", onChange: value => {
                                                subInputChange(value, 'slow');
                                            } })),
                                    React__default["default"].createElement("div", { className: "set-item" },
                                        React__default["default"].createElement("span", null, "Signal Length"),
                                        React__default["default"].createElement(nbitArco.Input, { style: { width: 120 }, className: "ml-4", value: subIndicator.sub.signal, allowClear: true, placeholder: "Please Enter something", onChange: value => {
                                                subInputChange(value, 'signal');
                                            } })),
                                    React__default["default"].createElement("div", null,
                                        React__default["default"].createElement(nbitArco.Checkbox, { checked: subIndicator.sub.deaChecked, onChange: value => {
                                                subCheckboxChange(value, 'deaChecked');
                                            } }, "DEA")),
                                    React__default["default"].createElement("div", null,
                                        React__default["default"].createElement(nbitArco.Checkbox, { checked: subIndicator.sub.difChecked, onChange: value => {
                                                subCheckboxChange(value, 'difChecked');
                                            } }, "DIF")),
                                    React__default["default"].createElement("div", null,
                                        React__default["default"].createElement(nbitArco.Checkbox, { checked: subIndicator.sub.macdChecked, onChange: value => {
                                                subCheckboxChange(value, 'macdChecked');
                                            } }, "MACD"))))))))),
        React__default["default"].createElement("div", { className: `chart-wrap mt-8 ${subIndicator.checked ? 'have-sub' : 'not-sub'}` },
            React__default["default"].createElement(kLineChart, { chartLayoutOptions: chartLayoutOptions, data: curData, createChart: { brandColor, upColor, downColor }, mainIndicator: mainIndicator, subIndicator: subIndicator }))));
};
KLine.displayName = 'KLine';
var kLine = React.memo(KLine);

exports["default"] = kLine;
