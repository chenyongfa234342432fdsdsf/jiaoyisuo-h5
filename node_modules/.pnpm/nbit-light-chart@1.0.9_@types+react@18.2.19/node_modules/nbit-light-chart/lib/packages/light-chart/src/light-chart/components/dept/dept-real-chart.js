'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var lightweightCharts = require('lightweight-charts');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

exports.TradeDirectionEnum = void 0;
(function (TradeDirectionEnum) {
    TradeDirectionEnum["Buy"] = "dept";
    TradeDirectionEnum["Sell"] = "sell";
})(exports.TradeDirectionEnum || (exports.TradeDirectionEnum = {}));
const DeptRealChart = (props) => {
    const leftDeptRef = React.useRef(null);
    const rightDeptRef = React.useRef(null);
    const deptRef = React.useRef(null);
    const chartRef = React.useRef(null);
    React.useEffect(() => {
        chartRef.current = lightweightCharts.createChart(document.getElementById('chart'), {
            layout: props.chartLayoutOptions,
            // 时间刻度和价格刻度
            timeScale: {
                tickMarkFormatter: time => {
                    return time;
                },
            },
        });
        const leftData = [];
        const rightData = [];
        props.data.forEach(item => {
            if (item.direction !== exports.TradeDirectionEnum.Sell) {
                leftData.push(item);
            }
            else {
                rightData.push(item);
            }
        });
        leftDeptRef.current = chartRef.current.addAreaSeries({
            lineColor: props.createChart.upColor,
            topColor: props.createChart.upColor,
            bottomColor: props.createChart.upLightColor,
        });
        rightDeptRef.current = chartRef.current.addAreaSeries({
            lineColor: props.createChart.downColor,
            topColor: props.createChart.downColor,
            bottomColor: props.createChart.downLightColor,
        });
        leftDeptRef.current.setData(leftData);
        rightDeptRef.current.setData(rightData);
        chartRef.current.timeScale().fitContent();
        let toolTipWidth = 100;
        let toolTipHeight = 80;
        let toolTipMargin = 15;
        let toolTip = document.createElement('div');
        toolTip.className = 'dept-floating-tooltip';
        document.getElementById('chart')?.appendChild(toolTip);
        // update tooltip
        chartRef.current.subscribeCrosshairMove(function (param) {
            if (!param.time ||
                param.point.x < 0 ||
                param.point.x > deptRef.current.clientWidth ||
                param.point.y < 0 ||
                param.point.y > deptRef.current.clientHeight) {
                toolTip.style.display = 'none';
                return;
            }
            let dateStr = param.time;
            toolTip.style.display = 'block';
            let leftCount = param.seriesPrices.get(leftDeptRef.current);
            let rightCount = param.seriesPrices.get(rightDeptRef.current);
            // eslint-disable-next-line no-useless-concat
            toolTip.innerHTML = `<div>${dateStr}</div>` + `${'<div style="marginTop: 4px">'}${leftCount || rightCount}</div>`;
            let y = param.point.y;
            let left = param.point.x + toolTipMargin;
            if (left > deptRef.current.clientWidth - toolTipWidth) {
                left = param.point.x - toolTipMargin - toolTipWidth;
            }
            let top = y + toolTipMargin;
            if (top > deptRef.current.clientHeight - toolTipHeight) {
                top = y - toolTipHeight - toolTipMargin;
            }
            toolTip.style.left = `${left}px`;
            toolTip.style.top = `${top}px`;
        });
    }, []);
    return React__default["default"].createElement("div", { ref: deptRef, className: "chart", id: "chart" });
};
DeptRealChart.displayName = 'deptChart';

exports["default"] = DeptRealChart;
