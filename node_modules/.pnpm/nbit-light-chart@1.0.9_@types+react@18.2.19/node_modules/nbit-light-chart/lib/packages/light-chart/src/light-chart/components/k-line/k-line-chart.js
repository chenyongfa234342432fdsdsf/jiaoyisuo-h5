'use strict';

var dayjs = require('dayjs');
var lightweightCharts_esm_development = require('../../../../../../node_modules/.pnpm/lightweight-charts@3.8.0/node_modules/lightweight-charts/dist/lightweight-charts.esm.development.js');
var React = require('react');
var classNames = require('classnames');
var indicator = require('../../util/indicator.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

const KLineChart = (props) => {
    const chartRef = React.useRef(null);
    const candlestickSeriesRef = React.useRef(null);
    const volumeSeriesRef = React.useRef(null);
    const smaLineRef = React.useRef(null);
    const deaRef = React.useRef(null);
    const difRef = React.useRef(null);
    const checkIsUp = (value) => {
        return value?.close > value?.open;
    };
    let _ma = 0;
    let _mainK = {
        ...props.data[props.data.length - 1],
        time: dayjs__default["default"](props.data[props.data.length - 1].time).format('YY-MM-DD HH:mm'),
        isUp: checkIsUp(props.data[props.data.length - 1]),
    };
    let _subK = {
        dea: undefined,
        dif: undefined,
        macd: undefined,
    };
    if (props.mainIndicator.checked) {
        const { strip, type } = props.mainIndicator.sub;
        let smaData = indicator.calculateSMA(props.data, Number(strip), type);
        _ma = smaData[smaData.length - 1].value;
    }
    if (props.subIndicator.checked) {
        const { difChecked, deaChecked, macdChecked, fast, slow, signal } = props.subIndicator.sub;
        const newData = indicator.calculateMACD(props.data, Number(fast), Number(slow), Number(signal));
        if (difChecked) {
            _subK.dif = newData[newData.length - 1].dif;
        }
        if (deaChecked) {
            _subK.dea = newData[newData.length - 1].dea;
        }
        if (macdChecked) {
            _subK.macd = newData[newData.length - 1].value;
        }
    }
    // const may
    const [maIndicator, setMaIndicator] = React.useState({
        ma: _ma,
    });
    const [mainK, setMainK] = React.useState(_mainK);
    const [subK, setSubK] = React.useState(_subK);
    React.useEffect(() => {
        chartRef.current = lightweightCharts_esm_development.createChart(document.getElementById('chart'), {
            layout: props.chartLayoutOptions,
            timeScale: {
                tickMarkFormatter: item => {
                    return dayjs__default["default"](item).format('YYYY-MM-DD HH:mm');
                },
            },
            rightPriceScale: {
                scaleMargins: {
                    top: 0.0,
                    bottom: 0.0,
                },
            },
        });
        candlestickSeriesRef.current = chartRef.current.addCandlestickSeries({
            upColor: props?.createChart?.upColor || '#26a69a',
            downColor: props?.createChart?.downColor || '#ef5350',
            borderVisible: false,
            wickUpColor: props?.createChart?.upColor || '#26a69a',
            wickDownColor: props?.createChart?.downColor || '#ef5350',
            priceScaleId: 'candledtick',
        });
        smaLineRef.current = chartRef.current.addLineSeries({
            color: props.createChart.brandColor,
            lineWidth: 2,
            lineStyle: lightweightCharts_esm_development.LineStyle.Solid,
            priceScaleId: 'candledtick',
        });
        candlestickSeriesRef.current.setData(props.data);
        chartRef.current.timeScale().fitContent();
        chartRef.current.subscribeCrosshairMove(param => {
            const time = param.time;
            if (param.time === undefined) {
                setMaIndicator({
                    ma: _ma,
                });
                setMainK(_mainK);
                setSubK(_subK);
            }
            else {
                const volumeSeriesData = volumeSeriesRef.current
                    ? param.seriesPrices.get(volumeSeriesRef.current)
                    : undefined;
                const chartData = candlestickSeriesRef.current
                    ? param.seriesPrices.get(candlestickSeriesRef.current)
                    : {};
                const smaLine = smaLineRef.current ? param.seriesPrices.get(smaLineRef.current) : 0;
                const dif = difRef.current ? param.seriesPrices.get(difRef.current) : undefined;
                const dea = deaRef.current ? param.seriesPrices.get(deaRef.current) : undefined;
                console.log('smaLine', smaLine);
                setMaIndicator({
                    ma: smaLine,
                });
                setMainK({
                    time: dayjs__default["default"](time).format('YYYY-MM-DD HH:mm'),
                    open: chartData?.open,
                    close: chartData?.close,
                    high: chartData?.high,
                    low: chartData?.low,
                    isUp: checkIsUp(chartData),
                });
                setSubK({
                    macd: volumeSeriesData,
                    dea: dea,
                    dif: dif,
                });
            }
        });
    }, []);
    React.useEffect(() => {
        console.log('props.data----', props.data);
        if (candlestickSeriesRef.current && chartRef.current) {
            if (props.mainIndicator.checked && props.mainIndicator.sub.checked) {
                const { strip, type } = props.mainIndicator.sub;
                let smaData = indicator.calculateSMA(props.data, Number(strip), type);
                smaLineRef.current.setData(smaData);
            }
            candlestickSeriesRef.current.setData(props.data);
            if (props.subIndicator.checked) {
                const { difChecked, deaChecked, macdChecked, fast, slow, signal } = props.subIndicator.sub;
                const newData = indicator.calculateMACD(props.data, Number(fast), Number(slow), Number(signal));
                const difData = newData.map(item => {
                    return {
                        time: item.time,
                        value: item.dif,
                    };
                });
                const deaData = newData.map(item => {
                    return {
                        time: item.time,
                        value: item.dea,
                    };
                });
                const macdData = newData.map(item => {
                    return {
                        time: item.time,
                        value: item.value,
                        color: item.value < 0 ? props.createChart.downColor : props.createChart.upColor,
                    };
                });
                console.log('difData', difData);
                console.log('deaData', deaData);
                console.log('macdData', macdData);
                const subLineConfig = {
                    color: props.createChart.brandColor,
                    lineWidth: 2,
                    lineStyle: lightweightCharts_esm_development.LineStyle.Solid,
                    priceScaleId: 'volume',
                    scaleMargins: {
                        top: 0.7,
                        bottom: 0.1,
                    },
                };
                if (!difRef.current) {
                    difRef.current = chartRef.current?.addLineSeries({
                        ...subLineConfig,
                    });
                }
                if (!deaRef.current) {
                    deaRef.current = chartRef.current?.addLineSeries({
                        ...subLineConfig,
                    });
                }
                if (!volumeSeriesRef.current) {
                    volumeSeriesRef.current = chartRef.current?.addHistogramSeries({
                        color: props.createChart.upColor,
                        priceFormat: {
                            type: 'price',
                        },
                        priceScaleId: 'volume',
                        scaleMargins: {
                            top: 0.7,
                            bottom: 0.1,
                        },
                    });
                }
                difRef.current.setData((difChecked ? difData : []));
                deaRef.current.setData((deaChecked ? deaData : []));
                volumeSeriesRef.current.setData((macdChecked ? macdData : []));
            }
        }
    }, [props.data, props.mainIndicator, props.subIndicator]);
    React.useEffect(() => {
        if (candlestickSeriesRef.current) {
            if (props.subIndicator.checked) {
                candlestickSeriesRef.current.applyOptions({
                    scaleMargins: {
                        top: 0.1,
                        bottom: 0.5,
                    },
                });
            }
            else {
                candlestickSeriesRef.current.applyOptions({
                    scaleMargins: {
                        top: 0,
                        bottom: 0,
                    },
                });
            }
        }
        if (smaLineRef.current) {
            if (props.subIndicator.checked) {
                smaLineRef.current.applyOptions({
                    scaleMargins: {
                        top: 0.1,
                        bottom: 0.5,
                    },
                });
            }
            else {
                smaLineRef.current.applyOptions({
                    scaleMargins: {
                        top: 0,
                        bottom: 0,
                    },
                });
            }
        }
    }, [props.subIndicator.checked]);
    return (React__default["default"].createElement("div", { className: "chart", id: "chart" },
        React__default["default"].createElement("div", { className: "k-data text-text_color_03" },
            React__default["default"].createElement("span", null, mainK.time),
            React__default["default"].createElement("span", { className: "ml-2" },
                "Open:",
                ' ',
                React__default["default"].createElement("span", { className: classNames__default["default"]({
                        'text-buy_up_color': mainK.isUp,
                        'text-sell_down_color': !mainK.isUp,
                    }) }, mainK.open)),
            React__default["default"].createElement("span", { className: "ml-2" },
                "Hign:",
                ' ',
                React__default["default"].createElement("span", { className: classNames__default["default"]({
                        'text-buy_up_color': mainK.isUp,
                        'text-sell_down_color': !mainK.isUp,
                    }) }, mainK.high)),
            React__default["default"].createElement("span", { className: "ml-2" },
                "Low:",
                ' ',
                React__default["default"].createElement("span", { className: classNames__default["default"]({
                        'text-buy_up_color': mainK.isUp,
                        'text-sell_down_color': !mainK.isUp,
                    }) }, mainK.low)),
            React__default["default"].createElement("span", { className: "ml-2" },
                "Close:",
                ' ',
                React__default["default"].createElement("span", { className: classNames__default["default"]({
                        'text-buy_up_color': mainK.isUp,
                        'text-sell_down_color': !mainK.isUp,
                    }) }, mainK.close))),
        props.mainIndicator.checked ? (React__default["default"].createElement("div", { className: "ma text-text_color_03" },
            React__default["default"].createElement("span", null,
                `MA(${props.mainIndicator.sub.strip}):`,
                React__default["default"].createElement("span", { className: "text-brand_color" }, maIndicator.ma)))) : null,
        props.subIndicator.checked ? (React__default["default"].createElement("div", { className: "macd text-text_color_03" },
            React__default["default"].createElement("span", null, `MACD(${props.subIndicator.sub.fast}, ${props.subIndicator.sub.slow}, ${props.subIndicator.sub.signal})`),
            props.subIndicator.sub.deaChecked && React__default["default"].createElement("span", { className: "ml-2" }, subK.dea),
            props.subIndicator.sub.difChecked && React__default["default"].createElement("span", { className: "ml-2" }, subK.dif),
            props.subIndicator.sub.macdChecked && React__default["default"].createElement("span", { className: "ml-2" }, subK.macd))) : null));
};

module.exports = KLineChart;
