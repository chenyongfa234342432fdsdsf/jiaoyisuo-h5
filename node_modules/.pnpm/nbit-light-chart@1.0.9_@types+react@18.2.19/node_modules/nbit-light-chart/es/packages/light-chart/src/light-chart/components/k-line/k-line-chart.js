function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import dayjs from 'dayjs';
import { createChart, LineStyle } from '../../../../../../node_modules/.pnpm/lightweight-charts@3.8.0/node_modules/lightweight-charts/dist/lightweight-charts.esm.development.js';
import React, { useRef, useState, useEffect } from 'react';
import classNames from 'classnames';
import { calculateSMA, calculateMACD } from '../../util/indicator.js';

var KLineChart = function KLineChart(props) {
  var chartRef = useRef(null);
  var candlestickSeriesRef = useRef(null);
  var volumeSeriesRef = useRef(null);
  var smaLineRef = useRef(null);
  var deaRef = useRef(null);
  var difRef = useRef(null);

  var checkIsUp = function checkIsUp(value) {
    return (value === null || value === void 0 ? void 0 : value.close) > (value === null || value === void 0 ? void 0 : value.open);
  };

  var _ma = 0;

  var _mainK = _objectSpread(_objectSpread({}, props.data[props.data.length - 1]), {}, {
    time: dayjs(props.data[props.data.length - 1].time).format('YY-MM-DD HH:mm'),
    isUp: checkIsUp(props.data[props.data.length - 1])
  });

  var _subK = {
    dea: undefined,
    dif: undefined,
    macd: undefined
  };

  if (props.mainIndicator.checked) {
    var _props$mainIndicator$ = props.mainIndicator.sub,
        strip = _props$mainIndicator$.strip,
        type = _props$mainIndicator$.type;
    var smaData = calculateSMA(props.data, Number(strip), type);
    _ma = smaData[smaData.length - 1].value;
  }

  if (props.subIndicator.checked) {
    var _props$subIndicator$s = props.subIndicator.sub,
        difChecked = _props$subIndicator$s.difChecked,
        deaChecked = _props$subIndicator$s.deaChecked,
        macdChecked = _props$subIndicator$s.macdChecked,
        fast = _props$subIndicator$s.fast,
        slow = _props$subIndicator$s.slow,
        signal = _props$subIndicator$s.signal;
    var newData = calculateMACD(props.data, Number(fast), Number(slow), Number(signal));

    if (difChecked) {
      _subK.dif = newData[newData.length - 1].dif;
    }

    if (deaChecked) {
      _subK.dea = newData[newData.length - 1].dea;
    }

    if (macdChecked) {
      _subK.macd = newData[newData.length - 1].value;
    }
  } // const may


  var _useState = useState({
    ma: _ma
  }),
      _useState2 = _slicedToArray(_useState, 2),
      maIndicator = _useState2[0],
      setMaIndicator = _useState2[1];

  var _useState3 = useState(_mainK),
      _useState4 = _slicedToArray(_useState3, 2),
      mainK = _useState4[0],
      setMainK = _useState4[1];

  var _useState5 = useState(_subK),
      _useState6 = _slicedToArray(_useState5, 2),
      subK = _useState6[0],
      setSubK = _useState6[1];

  useEffect(function () {
    var _props$createChart, _props$createChart2, _props$createChart3, _props$createChart4;

    chartRef.current = createChart(document.getElementById('chart'), {
      layout: props.chartLayoutOptions,
      timeScale: {
        tickMarkFormatter: function tickMarkFormatter(item) {
          return dayjs(item).format('YYYY-MM-DD HH:mm');
        }
      },
      rightPriceScale: {
        scaleMargins: {
          top: 0.0,
          bottom: 0.0
        }
      }
    });
    candlestickSeriesRef.current = chartRef.current.addCandlestickSeries({
      upColor: (props === null || props === void 0 ? void 0 : (_props$createChart = props.createChart) === null || _props$createChart === void 0 ? void 0 : _props$createChart.upColor) || '#26a69a',
      downColor: (props === null || props === void 0 ? void 0 : (_props$createChart2 = props.createChart) === null || _props$createChart2 === void 0 ? void 0 : _props$createChart2.downColor) || '#ef5350',
      borderVisible: false,
      wickUpColor: (props === null || props === void 0 ? void 0 : (_props$createChart3 = props.createChart) === null || _props$createChart3 === void 0 ? void 0 : _props$createChart3.upColor) || '#26a69a',
      wickDownColor: (props === null || props === void 0 ? void 0 : (_props$createChart4 = props.createChart) === null || _props$createChart4 === void 0 ? void 0 : _props$createChart4.downColor) || '#ef5350',
      priceScaleId: 'candledtick'
    });
    smaLineRef.current = chartRef.current.addLineSeries({
      color: props.createChart.brandColor,
      lineWidth: 2,
      lineStyle: LineStyle.Solid,
      priceScaleId: 'candledtick'
    });
    candlestickSeriesRef.current.setData(props.data);
    chartRef.current.timeScale().fitContent();
    chartRef.current.subscribeCrosshairMove(function (param) {
      var time = param.time;

      if (param.time === undefined) {
        setMaIndicator({
          ma: _ma
        });
        setMainK(_mainK);
        setSubK(_subK);
      } else {
        var volumeSeriesData = volumeSeriesRef.current ? param.seriesPrices.get(volumeSeriesRef.current) : undefined;
        var chartData = candlestickSeriesRef.current ? param.seriesPrices.get(candlestickSeriesRef.current) : {};
        var smaLine = smaLineRef.current ? param.seriesPrices.get(smaLineRef.current) : 0;
        var dif = difRef.current ? param.seriesPrices.get(difRef.current) : undefined;
        var dea = deaRef.current ? param.seriesPrices.get(deaRef.current) : undefined;
        console.log('smaLine', smaLine);
        setMaIndicator({
          ma: smaLine
        });
        setMainK({
          time: dayjs(time).format('YYYY-MM-DD HH:mm'),
          open: chartData === null || chartData === void 0 ? void 0 : chartData.open,
          close: chartData === null || chartData === void 0 ? void 0 : chartData.close,
          high: chartData === null || chartData === void 0 ? void 0 : chartData.high,
          low: chartData === null || chartData === void 0 ? void 0 : chartData.low,
          isUp: checkIsUp(chartData)
        });
        setSubK({
          macd: volumeSeriesData,
          dea: dea,
          dif: dif
        });
      }
    });
  }, []);
  useEffect(function () {
    console.log('props.data----', props.data);

    if (candlestickSeriesRef.current && chartRef.current) {
      if (props.mainIndicator.checked && props.mainIndicator.sub.checked) {
        var _props$mainIndicator$2 = props.mainIndicator.sub,
            _strip = _props$mainIndicator$2.strip,
            _type = _props$mainIndicator$2.type;
        var smaData = calculateSMA(props.data, Number(_strip), _type);
        smaLineRef.current.setData(smaData);
      }

      candlestickSeriesRef.current.setData(props.data);

      if (props.subIndicator.checked) {
        var _props$subIndicator$s2 = props.subIndicator.sub,
            _difChecked = _props$subIndicator$s2.difChecked,
            _deaChecked = _props$subIndicator$s2.deaChecked,
            _macdChecked = _props$subIndicator$s2.macdChecked,
            _fast = _props$subIndicator$s2.fast,
            _slow = _props$subIndicator$s2.slow,
            _signal = _props$subIndicator$s2.signal;
        var newData = calculateMACD(props.data, Number(_fast), Number(_slow), Number(_signal));
        var difData = newData.map(function (item) {
          return {
            time: item.time,
            value: item.dif
          };
        });
        var deaData = newData.map(function (item) {
          return {
            time: item.time,
            value: item.dea
          };
        });
        var macdData = newData.map(function (item) {
          return {
            time: item.time,
            value: item.value,
            color: item.value < 0 ? props.createChart.downColor : props.createChart.upColor
          };
        });
        console.log('difData', difData);
        console.log('deaData', deaData);
        console.log('macdData', macdData);
        var subLineConfig = {
          color: props.createChart.brandColor,
          lineWidth: 2,
          lineStyle: LineStyle.Solid,
          priceScaleId: 'volume',
          scaleMargins: {
            top: 0.7,
            bottom: 0.1
          }
        };

        if (!difRef.current) {
          var _chartRef$current;

          difRef.current = (_chartRef$current = chartRef.current) === null || _chartRef$current === void 0 ? void 0 : _chartRef$current.addLineSeries(_objectSpread({}, subLineConfig));
        }

        if (!deaRef.current) {
          var _chartRef$current2;

          deaRef.current = (_chartRef$current2 = chartRef.current) === null || _chartRef$current2 === void 0 ? void 0 : _chartRef$current2.addLineSeries(_objectSpread({}, subLineConfig));
        }

        if (!volumeSeriesRef.current) {
          var _chartRef$current3;

          volumeSeriesRef.current = (_chartRef$current3 = chartRef.current) === null || _chartRef$current3 === void 0 ? void 0 : _chartRef$current3.addHistogramSeries({
            color: props.createChart.upColor,
            priceFormat: {
              type: 'price'
            },
            priceScaleId: 'volume',
            scaleMargins: {
              top: 0.7,
              bottom: 0.1
            }
          });
        }

        difRef.current.setData(_difChecked ? difData : []);
        deaRef.current.setData(_deaChecked ? deaData : []);
        volumeSeriesRef.current.setData(_macdChecked ? macdData : []);
      }
    }
  }, [props.data, props.mainIndicator, props.subIndicator]);
  useEffect(function () {
    if (candlestickSeriesRef.current) {
      if (props.subIndicator.checked) {
        candlestickSeriesRef.current.applyOptions({
          scaleMargins: {
            top: 0.1,
            bottom: 0.5
          }
        });
      } else {
        candlestickSeriesRef.current.applyOptions({
          scaleMargins: {
            top: 0,
            bottom: 0
          }
        });
      }
    }

    if (smaLineRef.current) {
      if (props.subIndicator.checked) {
        smaLineRef.current.applyOptions({
          scaleMargins: {
            top: 0.1,
            bottom: 0.5
          }
        });
      } else {
        smaLineRef.current.applyOptions({
          scaleMargins: {
            top: 0,
            bottom: 0
          }
        });
      }
    }
  }, [props.subIndicator.checked]);
  return React.createElement("div", {
    className: "chart",
    id: "chart"
  }, React.createElement("div", {
    className: "k-data text-text_color_03"
  }, React.createElement("span", null, mainK.time), React.createElement("span", {
    className: "ml-2"
  }, "Open:", ' ', React.createElement("span", {
    className: classNames({
      'text-buy_up_color': mainK.isUp,
      'text-sell_down_color': !mainK.isUp
    })
  }, mainK.open)), React.createElement("span", {
    className: "ml-2"
  }, "Hign:", ' ', React.createElement("span", {
    className: classNames({
      'text-buy_up_color': mainK.isUp,
      'text-sell_down_color': !mainK.isUp
    })
  }, mainK.high)), React.createElement("span", {
    className: "ml-2"
  }, "Low:", ' ', React.createElement("span", {
    className: classNames({
      'text-buy_up_color': mainK.isUp,
      'text-sell_down_color': !mainK.isUp
    })
  }, mainK.low)), React.createElement("span", {
    className: "ml-2"
  }, "Close:", ' ', React.createElement("span", {
    className: classNames({
      'text-buy_up_color': mainK.isUp,
      'text-sell_down_color': !mainK.isUp
    })
  }, mainK.close))), props.mainIndicator.checked ? React.createElement("div", {
    className: "ma text-text_color_03"
  }, React.createElement("span", null, "MA(".concat(props.mainIndicator.sub.strip, "):"), React.createElement("span", {
    className: "text-brand_color"
  }, maIndicator.ma))) : null, props.subIndicator.checked ? React.createElement("div", {
    className: "macd text-text_color_03"
  }, React.createElement("span", null, "MACD(".concat(props.subIndicator.sub.fast, ", ").concat(props.subIndicator.sub.slow, ", ").concat(props.subIndicator.sub.signal, ")")), props.subIndicator.sub.deaChecked && React.createElement("span", {
    className: "ml-2"
  }, subK.dea), props.subIndicator.sub.difChecked && React.createElement("span", {
    className: "ml-2"
  }, subK.dif), props.subIndicator.sub.macdChecked && React.createElement("span", {
    className: "ml-2"
  }, subK.macd)) : null);
};

export { KLineChart as default };
