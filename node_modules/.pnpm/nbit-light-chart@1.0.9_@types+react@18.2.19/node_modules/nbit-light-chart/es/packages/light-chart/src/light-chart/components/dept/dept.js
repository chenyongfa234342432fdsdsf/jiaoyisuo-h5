function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { memo, useState, useEffect } from 'react';
import './dept.css.js';
import DeptChart from './dept-chart.js';
import DeptRealChart from './dept-real-chart.js';
import { getTheme } from '../../util/theme.js';
var DeptChartSpecieEnum;

(function (DeptChartSpecieEnum) {
  DeptChartSpecieEnum["Dept"] = "dept";
  DeptChartSpecieEnum["DeptCurrent"] = "deptCurrent";
})(DeptChartSpecieEnum || (DeptChartSpecieEnum = {}));

var Dept = function Dept(props) {
  var _getTheme = getTheme(),
      bgColor = _getTheme.bgColor,
      textColor = _getTheme.textColor,
      brandColor = _getTheme.brandColor,
      upColor = _getTheme.upColor,
      downColor = _getTheme.downColor,
      upLightColor = _getTheme.upLightColor,
      downLightColor = _getTheme.downLightColor;

  var _useState = useState({
    background: {
      color: bgColor
    },
    textColor: textColor
  }),
      _useState2 = _slicedToArray(_useState, 2),
      chartLayoutOptions = _useState2[0],
      setChartLayoutOptions = _useState2[1];

  useEffect(function () {
    var _bgColor = getTheme().bgColor;
    var _textColor = getTheme().textColor;
    setChartLayoutOptions({
      background: {
        color: _bgColor
      },
      textColor: _textColor
    });
  }, [props.theme]);
  return React.createElement("div", {
    className: "dept-chart-wrap"
  }, React.createElement("div", {
    className: "chart-wrap"
  }, props.type === DeptChartSpecieEnum.Dept ? React.createElement(DeptChart, {
    chartLayoutOptions: chartLayoutOptions,
    data: props.deptData,
    createChart: {
      brandColor: brandColor,
      upColor: upColor,
      downColor: downColor,
      upLightColor: upLightColor,
      downLightColor: downLightColor
    }
  }) : React.createElement(DeptRealChart, {
    chartLayoutOptions: chartLayoutOptions,
    data: props.deptData,
    createChart: {
      brandColor: brandColor,
      upColor: upColor,
      downColor: downColor,
      upLightColor: upLightColor,
      downLightColor: downLightColor
    }
  })));
};

var dept = memo(Dept);
export { DeptChartSpecieEnum, dept as default };
