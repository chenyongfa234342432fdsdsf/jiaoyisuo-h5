import React, { useRef, useEffect } from 'react';
import { createChart } from 'lightweight-charts';
var TradeDirectionEnum;

(function (TradeDirectionEnum) {
  TradeDirectionEnum["Buy"] = "dept";
  TradeDirectionEnum["Sell"] = "sell";
})(TradeDirectionEnum || (TradeDirectionEnum = {}));

var DeptRealChart = function DeptRealChart(props) {
  var leftDeptRef = useRef(null);
  var rightDeptRef = useRef(null);
  var deptRef = useRef(null);
  var chartRef = useRef(null);
  useEffect(function () {
    var _document$getElementB;

    chartRef.current = createChart(document.getElementById('chart'), {
      layout: props.chartLayoutOptions,
      // 时间刻度和价格刻度
      timeScale: {
        tickMarkFormatter: function tickMarkFormatter(time) {
          return time;
        }
      }
    });
    var leftData = [];
    var rightData = [];
    props.data.forEach(function (item) {
      if (item.direction !== TradeDirectionEnum.Sell) {
        leftData.push(item);
      } else {
        rightData.push(item);
      }
    });
    leftDeptRef.current = chartRef.current.addAreaSeries({
      lineColor: props.createChart.upColor,
      topColor: props.createChart.upColor,
      bottomColor: props.createChart.upLightColor
    });
    rightDeptRef.current = chartRef.current.addAreaSeries({
      lineColor: props.createChart.downColor,
      topColor: props.createChart.downColor,
      bottomColor: props.createChart.downLightColor
    });
    leftDeptRef.current.setData(leftData);
    rightDeptRef.current.setData(rightData);
    chartRef.current.timeScale().fitContent();
    var toolTipWidth = 100;
    var toolTipHeight = 80;
    var toolTipMargin = 15;
    var toolTip = document.createElement('div');
    toolTip.className = 'dept-floating-tooltip';
    (_document$getElementB = document.getElementById('chart')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.appendChild(toolTip); // update tooltip

    chartRef.current.subscribeCrosshairMove(function (param) {
      if (!param.time || param.point.x < 0 || param.point.x > deptRef.current.clientWidth || param.point.y < 0 || param.point.y > deptRef.current.clientHeight) {
        toolTip.style.display = 'none';
        return;
      }

      var dateStr = param.time;
      toolTip.style.display = 'block';
      var leftCount = param.seriesPrices.get(leftDeptRef.current);
      var rightCount = param.seriesPrices.get(rightDeptRef.current); // eslint-disable-next-line no-useless-concat

      toolTip.innerHTML = "<div>".concat(dateStr, "</div>") + '<div style="marginTop: 4px">'.concat(leftCount || rightCount, "</div>");
      var y = param.point.y;
      var left = param.point.x + toolTipMargin;

      if (left > deptRef.current.clientWidth - toolTipWidth) {
        left = param.point.x - toolTipMargin - toolTipWidth;
      }

      var top = y + toolTipMargin;

      if (top > deptRef.current.clientHeight - toolTipHeight) {
        top = y - toolTipHeight - toolTipMargin;
      }

      toolTip.style.left = "".concat(left, "px");
      toolTip.style.top = "".concat(top, "px");
    });
  }, []);
  return React.createElement("div", {
    ref: deptRef,
    className: "chart",
    id: "chart"
  });
};

DeptRealChart.displayName = 'deptChart';
export { TradeDirectionEnum, DeptRealChart as default };
