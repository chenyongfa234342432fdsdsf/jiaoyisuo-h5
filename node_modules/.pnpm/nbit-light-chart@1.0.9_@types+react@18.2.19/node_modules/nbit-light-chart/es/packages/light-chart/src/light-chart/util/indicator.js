function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import dayjs from 'dayjs';
import { TimeSharingType } from '../components/k-line/k-line.js';
/**
 * 计算 SMA
 */

var calculateSMA = function calculateSMA(data, count, price) {
  var result = [];

  var avg = function avg(data) {
    var sum = 0;

    for (var i = 0; i < data.length; i += 1) {
      sum += data[i][price];
    }

    return sum / data.length;
  };

  for (var i = count - 1, len = data.length; i < len; i += 1) {
    var val = avg(data.slice(i - count + 1, i + 1));

    if (i - count + 1 === 0) {
      for (var j = 0; j < count; j += 1) {
        result.push({
          time: data[j].time,
          value: val
        });
      }
    } else {
      result.push({
        time: data[i].time,
        value: val
      });
    }
  }

  return result;
};
/**
 * 计算EMA
 * // ema 上一日
 * // price 价格,dif
 * // period 日期
 */


var calculateEMA = function calculateEMA(ema, price, period) {
  return (2 * price + (period - 1) * ema) / (period + 1);
};
/**
 * 计算 MACD
 * fast 快线
 * slow 慢线
 * signal 日期
 */


var calculateMACD = function calculateMACD(data, fast, slow, signal) {
  var newData = [];
  data.forEach(function (item, index) {
    var emaFast = 0;
    var emaSlow = 0;
    var dea = 0;
    var dif = 0;

    if (index < fast - 1) {
      emaFast = 0;
    } else {
      var _newData;

      emaFast = calculateEMA(((_newData = newData[index - 1]) === null || _newData === void 0 ? void 0 : _newData.emaFast) || 0, item.close, fast);
    }

    if (index < slow - 1) {
      emaSlow = 0;
    } else {
      var _newData2;

      emaSlow = calculateEMA(((_newData2 = newData[index - 1]) === null || _newData2 === void 0 ? void 0 : _newData2.emaSlow) || 0, item.close, slow);
    }

    dif = emaFast - emaSlow;

    if (index < signal - 1) {
      dea = 0;
    } else {
      var _newData3;

      dea = calculateEMA(((_newData3 = newData[index - 1]) === null || _newData3 === void 0 ? void 0 : _newData3.dea) || 0, dif, signal);
    }

    newData.push({
      emaFast: emaFast,
      emaSlow: emaSlow,
      dif: dif,
      dea: dea,
      value: (dif - dea) * 2,
      time: item.time
    });
  });
  return newData;
};

var updateTimeOfData = function updateTimeOfData(value, type, kLineChartData) {
  var timeList = kLineChartData.map(function (item, index) {
    return {
      index: index,
      time: dayjs(item.time).format('YYYY-MM-DD HH:mm')
    };
  });
  var newData = [];

  if (type === TimeSharingType.Min) {
    var i = 0;

    while (i < timeList.length) {
      var min = Number(timeList[i].time.split(' ')[1].split(':')[1]);

      if (min === 0 || min % value === 0) {
        newData.push(_objectSpread({}, kLineChartData[i]));
        i += 1;
      } else {
        var remainder = min % value;
        var tempIndex = remainder;
        var tempObj = {};

        while (tempIndex <= value && i < timeList.length) {
          if (!tempObj.low) {
            tempObj.low = kLineChartData[i].low;
          } else {
            if (kLineChartData[i].low < tempObj.low) {
              tempObj.low = kLineChartData[i].low;
            }
          }

          if (!tempObj.high) {
            tempObj.high = kLineChartData[i].high;
          } else {
            if (kLineChartData[i].high > tempObj.high) {
              tempObj.high = kLineChartData[i].high;
            }
          }

          if (tempIndex === remainder) {
            tempObj.open = kLineChartData[i].open;
          }

          tempObj.close = kLineChartData[i].close;
          tempIndex += 1;
          i += 1;

          if (i === timeList.length) {
            tempObj.time = kLineChartData[i - 1].time + 1000 * 60 * (value - tempIndex + 1);
          } else {
            tempObj.time = kLineChartData[i - 1].time;
          }
        }

        newData.push(_objectSpread({}, tempObj));
      }
    }
  }

  if (type === TimeSharingType.Hour) {
    var _i = 0;

    while (_i < timeList.length) {
      var hour = Number(timeList[_i].time.split(' ')[1].split(':')[0]);

      var _min = Number(timeList[_i].time.split(' ')[1].split(':')[1]);

      if (_min === 0 && hour % value === 0) {
        newData.push(_objectSpread({}, kLineChartData[_i]));
        _i += 1;
      } else {
        var _remainder = hour % value;

        var _tempIndex2 = _remainder * 60 + _min;

        var _tempIndex = _tempIndex2;
        var _tempObj = {};

        while (_tempIndex2 <= value * 60 && _i < timeList.length) {
          if (!_tempObj.low) {
            _tempObj.low = kLineChartData[_i].low;
          } else {
            if (kLineChartData[_i].low < _tempObj.low) {
              _tempObj.low = kLineChartData[_i].low;
            }
          }

          if (!_tempObj.high) {
            _tempObj.high = kLineChartData[_i].high;
          } else {
            if (kLineChartData[_i].high > _tempObj.high) {
              _tempObj.high = kLineChartData[_i].high;
            }
          }

          if (_tempIndex2 === _tempIndex) {
            _tempObj.open = kLineChartData[_i].open;
          }

          _tempObj.close = kLineChartData[_i].close;
          _tempIndex2 += 1;
          _i += 1;

          if (_i === timeList.length) {
            _tempObj.time = kLineChartData[_i - 1].time + 1000 * 60 * (value * 60 - _tempIndex2 + 1);
          } else {
            _tempObj.time = kLineChartData[_i - 1].time;
          }
        }

        newData.push(_objectSpread({}, _tempObj));
      }
    }
  }

  if (type === TimeSharingType.Week) {
    var _i2 = 0;

    while (_i2 < timeList.length) {
      var date = timeList[_i2].time.split(' ')[0];

      var dayOfWeek = dayjs(kLineChartData[_i2].time).day();
      var _tempIndex3 = _i2;
      var newDate = dayOfWeek === 7 ? timeList[_i2].time.split(' ')[0] : dayjs(timeList[_i2].time.split(' ')[0]).add(7 - dayOfWeek, 'day').format('YYYY-MM-DD');
      var _tempObj2 = {};
      var tempDate = date;

      while (dayjs(tempDate).isBetween(date, newDate, null, '[]') && _i2 < timeList.length) {
        if (!_tempObj2.low) {
          _tempObj2.low = kLineChartData[_i2].low;
        } else {
          if (kLineChartData[_i2].low < _tempObj2.low) {
            _tempObj2.low = kLineChartData[_i2].low;
          }
        }

        if (!_tempObj2.high) {
          _tempObj2.high = kLineChartData[_i2].high;
        } else {
          if (kLineChartData[_i2].high > _tempObj2.high) {
            _tempObj2.high = kLineChartData[_i2].high;
          }
        }

        if (_tempIndex3 === _i2) {
          _tempObj2.open = kLineChartData[_i2].open;
        }

        _tempObj2.close = kLineChartData[_i2].close;
        _i2 += 1;
        _tempObj2.time = dayjs(newDate).valueOf();

        if (_i2 !== timeList.length) {
          tempDate = timeList[_i2].time.split(' ')[0];
        }
      }

      newData.push(_objectSpread({}, _tempObj2));
    }
  }

  if (type === TimeSharingType.Mon) {
    var _i3 = 0;

    while (_i3 < timeList.length) {
      var year = Number(timeList[_i3].time.split(' ')[0].split('-')[0]);
      var mon = Number(timeList[_i3].time.split(' ')[0].split('-')[1]);

      var _remainder2 = mon % value;

      var tempMon = mon;
      var tempYear = year;
      var _tempIndex4 = _i3;
      var _tempObj3 = {};

      while (tempMon === mon && tempYear === year && _i3 < timeList.length) {
        if (!_tempObj3.low) {
          _tempObj3.low = kLineChartData[_i3].low;
        } else {
          if (kLineChartData[_i3].low < _tempObj3.low) {
            _tempObj3.low = kLineChartData[_i3].low;
          }
        }

        if (!_tempObj3.high) {
          _tempObj3.high = kLineChartData[_i3].high;
        } else {
          if (kLineChartData[_i3].high > _tempObj3.high) {
            _tempObj3.high = kLineChartData[_i3].high;
          }
        }

        if (_tempIndex4 === _i3) {
          _tempObj3.open = kLineChartData[_i3].open;
        }

        _tempObj3.close = kLineChartData[_i3].close;
        _i3 += 1;

        if (Number(timeList[_i3 === timeList.length ? _i3 - 1 : _i3].time.split(' ')[0].split('-')[0]) !== tempYear || Number(timeList[_i3 === timeList.length ? _i3 - 1 : _i3].time.split(' ')[0].split('-')[1]) !== tempMon) {
          tempYear = Number(timeList[_i3 === timeList.length ? _i3 - 1 : _i3].time.split(' ')[0].split('-')[0]);
          tempMon = Number(timeList[_i3 === timeList.length ? _i3 - 1 : _i3].time.split(' ')[0].split('-')[1]);
        }

        if (_i3 === timeList.length) {
          _tempObj3.time = dayjs("".concat(tempMon + value - _remainder2 > 12 ? tempYear + 1 : tempYear, "-").concat(tempMon + value - _remainder2 > 12 ? tempMon + value - _remainder2 - 12 : tempMon + value - _remainder2, "-1")).valueOf();
        } else {
          _tempObj3.time = kLineChartData[_i3 - 1].time;
        }
      }

      newData.push(_objectSpread({}, _tempObj3));
    }
  }

  return newData;
};

export { calculateEMA, calculateMACD, calculateSMA, updateTimeOfData };
