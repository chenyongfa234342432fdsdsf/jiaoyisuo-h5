function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { Tabs, Select, Button, Modal, Checkbox, Input } from 'nbit-arco';
import React, { memo, useState, useEffect } from 'react';
import dayjs from 'dayjs';
import customParseFormat from '../../../../../../node_modules/.pnpm/dayjs@1.11.3/node_modules/dayjs/plugin/customParseFormat.js';
import isBetween from '../../../../../../node_modules/.pnpm/dayjs@1.11.3/node_modules/dayjs/plugin/isBetween.js';
import classNames from 'classnames';
import { updateTimeOfData } from '../../util/indicator.js';
import './k-line.css.js';
import KLineChart from './k-line-chart.js';
import { getTheme } from '../../util/theme.js';
import IconRight from '../../../../../../node_modules/.pnpm/nbit-arco@2.39.0-bate.2_sfoxds7t5ydpegc3knd667wn6m/node_modules/nbit-arco/icon/react-icon/IconRight/index.js';
var TabPane = Tabs.TabPane;
dayjs.extend(customParseFormat);
dayjs.extend(isBetween);
var TimeSharingType;

(function (TimeSharingType) {
  TimeSharingType["Min"] = "min";
  TimeSharingType["Hour"] = "hour";
  TimeSharingType["Week"] = "week";
  TimeSharingType["Mon"] = "mon";
})(TimeSharingType || (TimeSharingType = {}));

var Option = Select.Option;

var KLine = function KLine(props) {
  var _getTheme = getTheme(),
      bgColor = _getTheme.bgColor,
      textColor = _getTheme.textColor,
      brandColor = _getTheme.brandColor,
      upColor = _getTheme.upColor,
      downColor = _getTheme.downColor;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var _useState3 = useState(props === null || props === void 0 ? void 0 : props.kLineChartData),
      _useState4 = _slicedToArray(_useState3, 2),
      curData = _useState4[0],
      setCurData = _useState4[1];

  var _useState5 = useState({
    checked: true,
    sub: {
      checked: true,
      strip: '1',
      type: 'high',
      color: brandColor
    }
  }),
      _useState6 = _slicedToArray(_useState5, 2),
      mainIndicator = _useState6[0],
      setMainIndicator = _useState6[1];

  var _useState7 = useState({
    checked: false,
    sub: {
      fast: '12',
      slow: '26',
      signal: '1',
      deaChecked: false,
      difChecked: false,
      macdChecked: false
    }
  }),
      _useState8 = _slicedToArray(_useState7, 2),
      subIndicator = _useState8[0],
      setSubIndicator = _useState8[1];

  var _useState9 = useState({
    unit: 'min',
    value: 1
  }),
      _useState10 = _slicedToArray(_useState9, 2),
      curTime = _useState10[0],
      setCurTime = _useState10[1];

  useEffect(function () {
    if (props.kLineChartData) {
      setCurData(props.kLineChartData);
    }
  }, [props.kLineChartData]);

  var _useState11 = useState({
    background: {
      color: bgColor
    },
    textColor: textColor
  }),
      _useState12 = _slicedToArray(_useState11, 2),
      chartLayoutOptions = _useState12[0],
      setChartLayoutOptions = _useState12[1];

  useEffect(function () {
    var _bgColor = getTheme().bgColor;
    var _textColor = getTheme().textColor;
    setChartLayoutOptions({
      background: {
        color: _bgColor
      },
      textColor: _textColor
    });
  }, [props.theme]);
  var minutesList = [1, 3, 5, 15, 30];
  var dayList = [1, 2, 4, 6, 12];

  var timeSharingChange = function timeSharingChange(value, type) {
    setCurTime({
      unit: type,
      value: value
    });

    var _newData = updateTimeOfData(value, type, (props === null || props === void 0 ? void 0 : props.kLineChartData) || []);

    setCurData(_newData);
  };

  var updateTecIndicator = function updateTecIndicator() {
    setVisible(true);
  };

  var closeModal = function closeModal() {
    setVisible(false);
  };

  var confirm = function confirm() {
    setVisible(false);
  };

  var mainCheckboxChange = function mainCheckboxChange(value) {
    setMainIndicator(_objectSpread(_objectSpread({}, mainIndicator), {}, {
      checked: value
    }));
  };

  var subMainCheckboxChange = function subMainCheckboxChange(value) {
    setSubIndicator(_objectSpread(_objectSpread({}, subIndicator), {}, {
      checked: value
    }));
  };

  var mainSubCheckboxChange = function mainSubCheckboxChange(value) {
    setMainIndicator(_objectSpread(_objectSpread({}, mainIndicator), {}, {
      sub: _objectSpread(_objectSpread({}, mainIndicator.sub), {}, {
        checked: value
      })
    }));
  };

  var indicatorSelectChange = function indicatorSelectChange(value) {
    setMainIndicator(_objectSpread(_objectSpread({}, mainIndicator), {}, {
      sub: _objectSpread(_objectSpread({}, mainIndicator.sub), {}, {
        type: value
      })
    }));
  };

  var indicatorInputChange = function indicatorInputChange(value) {
    setMainIndicator(_objectSpread(_objectSpread({}, mainIndicator), {}, {
      sub: _objectSpread(_objectSpread({}, mainIndicator.sub), {}, {
        strip: value
      })
    }));
  };

  var subInputChange = function subInputChange(value, type) {
    setSubIndicator(_objectSpread(_objectSpread({}, subIndicator), {}, {
      sub: _objectSpread(_objectSpread({}, subIndicator.sub), {}, _defineProperty({}, type, value))
    }));
  };

  var subCheckboxChange = function subCheckboxChange(value, type) {
    setSubIndicator(_objectSpread(_objectSpread({}, subIndicator), {}, {
      sub: _objectSpread(_objectSpread({}, subIndicator.sub), {}, _defineProperty({}, type, value))
    }));
  };

  var options = [{
    value: 'High'
  }, {
    value: 'Low'
  }, {
    value: 'Open'
  }, {
    value: 'Close'
  }];
  return React.createElement("div", {
    className: "k-line-chart-wrap bg-bg_color"
  }, React.createElement("div", {
    className: "k-set-wrap"
  }, React.createElement(Select, {
    style: {
      width: 64
    },
    defaultValue: minutesList[0],
    onChange: function onChange(value) {
      timeSharingChange(value, TimeSharingType.Min);
    },
    className: "bg-bg_sr_color"
  }, minutesList.map(function (option) {
    return React.createElement(Option, {
      key: option,
      value: option
    }, React.createElement("span", {
      className: classNames({
        'text-brand_color': option === curTime.value && curTime.unit === TimeSharingType.Min
      })
    }, option, "\u5206"));
  })), React.createElement(Select, {
    className: "ml-4",
    style: {
      width: 64
    },
    defaultValue: dayList[0],
    onChange: function onChange(value) {
      timeSharingChange(value, TimeSharingType.Hour);
    }
  }, dayList.map(function (option) {
    return React.createElement(Option, {
      key: option,
      value: option
    }, React.createElement("span", {
      className: classNames({
        'text-brand_color': option === curTime.value && curTime.unit === TimeSharingType.Hour
      })
    }, option, "\u65F6"));
  })), React.createElement(Button, {
    className: "ml-4",
    onClick: function onClick() {
      return timeSharingChange(1, TimeSharingType.Week);
    }
  }, React.createElement("span", {
    className: classNames({
      'text-brand_color': curTime.value === 1 && curTime.unit === TimeSharingType.Week,
      'text-text_color_01': curTime.value !== 1 || curTime.unit !== TimeSharingType.Week
    })
  }, "\u4E00\u5468")), React.createElement(Button, {
    className: "ml-4",
    onClick: function onClick() {
      return timeSharingChange(1, TimeSharingType.Mon);
    }
  }, React.createElement("span", {
    className: classNames({
      'text-brand_color': curTime.value === 1 && curTime.unit === TimeSharingType.Mon,
      'text-text_color_01': curTime.value !== 1 || curTime.unit !== TimeSharingType.Mon
    })
  }, "\u4E00\u4E2A\u6708")), React.createElement(Button, {
    className: "ml-4 text-text_color_01",
    onClick: updateTecIndicator
  }, "\u6280\u672F\u6307\u6807")), React.createElement(Modal, {
    style: {
      width: 600
    },
    footer: React.createElement("div", {
      className: "footer-wrap"
    }, React.createElement(Button, {
      onClick: closeModal,
      className: "processing-button"
    }, "\u53D6\u6D88"), React.createElement(Button, {
      onClick: confirm,
      className: "processing-button ml-4",
      type: "primary"
    }, "\u786E\u5B9A")),
    title: "Indicators",
    visible: visible,
    onCancel: function onCancel() {
      closeModal();
    }
  }, React.createElement("div", {
    className: "modal-wrap"
  }, React.createElement(Tabs, {
    defaultActiveTab: "1"
  }, React.createElement(TabPane, {
    key: "1",
    title: "Main"
  }, React.createElement("div", {
    className: "main-wrap"
  }, React.createElement("div", {
    className: "main"
  }, React.createElement("div", null, "Main"), React.createElement("div", {
    className: "mt-4"
  }, React.createElement(Checkbox, {
    checked: mainIndicator.checked,
    onChange: mainCheckboxChange
  }), React.createElement("span", {
    className: "ml-2"
  }, "MA"), React.createElement(IconRight, {
    className: "ml-12"
  }))), React.createElement("div", null, React.createElement("div", null, "MA - Moving Average"), React.createElement("div", {
    className: "mt-3"
  }, React.createElement(Checkbox, {
    checked: mainIndicator.sub.checked,
    onChange: mainSubCheckboxChange
  }), React.createElement("span", {
    className: "ml-2"
  }, "MA1"), React.createElement(Input, {
    style: {
      width: 48
    },
    className: "ml-4",
    value: mainIndicator.sub.strip,
    allowClear: true,
    placeholder: "Please Enter something",
    onChange: indicatorInputChange
  }), React.createElement(Select, {
    placeholder: "Please select",
    className: "ml-4",
    value: mainIndicator.sub.type,
    style: {
      width: 120
    },
    onChange: indicatorSelectChange
  }, options.map(function (option) {
    return React.createElement(Option, {
      key: option.value,
      value: option.value
    }, option.value);
  })))))), React.createElement(TabPane, {
    key: "2",
    title: "Sub"
  }, React.createElement("div", {
    className: "sub-wrap"
  }, React.createElement("div", {
    className: "sub"
  }, React.createElement("div", null, "Sub"), React.createElement("div", {
    className: "mt-4"
  }, React.createElement(Checkbox, {
    checked: subIndicator.checked,
    onChange: subMainCheckboxChange
  }), React.createElement("span", {
    className: "ml-2"
  }, "MACD"), React.createElement(IconRight, {
    className: "ml-12"
  }))), React.createElement("div", null, React.createElement("div", null, "Moving Average Convergence Divergence"), React.createElement("div", {
    className: "mt-3 sub-set"
  }, React.createElement("div", {
    className: "set-item"
  }, React.createElement("span", null, "Fast Length"), React.createElement(Input, {
    style: {
      width: 120
    },
    className: "ml-4",
    value: subIndicator.sub.fast,
    allowClear: true,
    placeholder: "Please Enter something",
    onChange: function onChange(value) {
      subInputChange(value, 'fast');
    }
  })), React.createElement("div", {
    className: "set-item"
  }, React.createElement("span", null, "Slow Length"), React.createElement(Input, {
    style: {
      width: 120
    },
    className: "ml-4",
    value: subIndicator.sub.slow,
    allowClear: true,
    placeholder: "Please Enter something",
    onChange: function onChange(value) {
      subInputChange(value, 'slow');
    }
  })), React.createElement("div", {
    className: "set-item"
  }, React.createElement("span", null, "Signal Length"), React.createElement(Input, {
    style: {
      width: 120
    },
    className: "ml-4",
    value: subIndicator.sub.signal,
    allowClear: true,
    placeholder: "Please Enter something",
    onChange: function onChange(value) {
      subInputChange(value, 'signal');
    }
  })), React.createElement("div", null, React.createElement(Checkbox, {
    checked: subIndicator.sub.deaChecked,
    onChange: function onChange(value) {
      subCheckboxChange(value, 'deaChecked');
    }
  }, "DEA")), React.createElement("div", null, React.createElement(Checkbox, {
    checked: subIndicator.sub.difChecked,
    onChange: function onChange(value) {
      subCheckboxChange(value, 'difChecked');
    }
  }, "DIF")), React.createElement("div", null, React.createElement(Checkbox, {
    checked: subIndicator.sub.macdChecked,
    onChange: function onChange(value) {
      subCheckboxChange(value, 'macdChecked');
    }
  }, "MACD"))))))))), React.createElement("div", {
    className: "chart-wrap mt-8 ".concat(subIndicator.checked ? 'have-sub' : 'not-sub')
  }, React.createElement(KLineChart, {
    chartLayoutOptions: chartLayoutOptions,
    data: curData,
    createChart: {
      brandColor: brandColor,
      upColor: upColor,
      downColor: downColor
    },
    mainIndicator: mainIndicator,
    subIndicator: subIndicator
  })));
};

KLine.displayName = 'KLine';
var kLine = memo(KLine);
export { TimeSharingType, kLine as default };
