import dayjs from 'dayjs';
import { createChart, PriceScaleMode } from 'lightweight-charts';
import React, { useRef, useEffect } from 'react';

var SeriesChart = function SeriesChart(props) {
  var lineRef = useRef(null);
  var chartRef = useRef(null);
  useEffect(function () {
    if (chartRef.current) {
      chartRef.current.setData(props.data);
    }
  }, [props.data]);
  useEffect(function () {
    var _props$createChart, _document$getElementB;

    var chart = createChart(document.getElementById('chart'), {
      layout: props.chartLayoutOptions,
      timeScale: {
        timeVisible: true,
        secondsVisible: false,
        tickMarkFormatter: function tickMarkFormatter(time) {
          var _time = dayjs(time).format('YY-MM-DD HH:MM');

          if (_time.split(' ')[1].split(':')[0] !== '00') {
            return '';
          }

          return dayjs(time).format('YY-MM-DD HH:MM');
        }
      },
      rightPriceScale: {
        mode: PriceScaleMode.Percentage
      },
      // 布局相关
      // crosshair: {
      //   horzLine: {
      //     visible: false,
      //     labelVisible: false,
      //   },
      //   vertLine: {
      //     visible: true,
      //     labelVisible: false,
      //   },
      // },
      grid: {
        vertLines: {
          visible: false
        }
      }
    }); // #f1ae3d

    chartRef.current = chart.addLineSeries({
      color: props === null || props === void 0 ? void 0 : (_props$createChart = props.createChart) === null || _props$createChart === void 0 ? void 0 : _props$createChart.brandColor
    });
    chartRef.current.setData(props.data);
    chart.timeScale().fitContent();
    var toolTipWidth = 100;
    var toolTipHeight = 80;
    var toolTipMargin = 15;
    var toolTip = document.createElement('div');
    toolTip.className = 'series-floating-tooltip';
    (_document$getElementB = document.getElementById('chart')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.appendChild(toolTip); // update tooltip

    chart.subscribeCrosshairMove(function (param) {
      if (!param.time || param.point.x < 0 || param.point.x > lineRef.current.clientWidth || param.point.y < 0 || param.point.y > lineRef.current.clientHeight) {
        toolTip.style.display = 'none';
        return;
      }

      var dateStr = dayjs(param.time).format('MM-DD HH:MM');
      toolTip.style.display = 'block';
      var price = param.seriesPrices.get(chartRef.current); // eslint-disable-next-line no-useless-concat

      toolTip.innerHTML = "<div>".concat(dateStr, "</div>") + '<div style="marginTop: 4px">'.concat(price, "%</div>");
      var y = param.point.y;
      var left = param.point.x + toolTipMargin;

      if (left > lineRef.current.clientWidth - toolTipWidth) {
        left = param.point.x - toolTipMargin - toolTipWidth;
      }

      var top = y + toolTipMargin;

      if (top > lineRef.current.clientHeight - toolTipHeight) {
        top = y - toolTipHeight - toolTipMargin;
      }

      toolTip.style.left = "".concat(left, "px");
      toolTip.style.top = "".concat(top, "px");
    });
  }, []);
  return React.createElement("div", {
    ref: lineRef,
    className: "chart",
    id: "chart"
  });
};

SeriesChart.displayName = 'Series';
export { SeriesChart as default };
