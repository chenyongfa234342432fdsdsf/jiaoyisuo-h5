import React, { useEffect, useRef } from 'react'
import { ChartOptions, SingleValueData, createChart } from 'lightweight-charts'
import dayjs from 'dayjs'
import { DeptChartData } from './dept'

export interface PropsType {
  data: Array<DeptChartData>
  chartLayoutOptions: any
  createChart: {
    brandColor: string
    upColor: string
    downColor: string
    upLightColor: string
    downLightColor: string
  }
}

export enum TradeDirectionEnum {
  Buy = 'dept',
  Sell = 'sell',
}

const DeptRealChart = (props: PropsType) => {
  const leftDeptRef = useRef<any>(null)
  const rightDeptRef = useRef<any>(null)
  const deptRef = useRef<any>(null)
  const chartRef = useRef<any>(null)

  useEffect(() => {
    chartRef.current = createChart(document.getElementById('chart') as HTMLElement, {
      layout: props.chartLayoutOptions,
      // 时间刻度和价格刻度
      timeScale: {
        tickMarkFormatter: time => {
          return time
        },
      },
    })

    const leftData: Array<DeptChartData> = []
    const rightData: Array<DeptChartData> = []

    props.data.forEach(item => {
      if (item.direction !== TradeDirectionEnum.Sell) {
        leftData.push(item)
      } else {
        rightData.push(item)
      }
    })

    leftDeptRef.current = chartRef.current.addAreaSeries({
      lineColor: props.createChart.upColor,
      topColor: props.createChart.upColor,
      bottomColor: props.createChart.upLightColor,
    })

    rightDeptRef.current = chartRef.current.addAreaSeries({
      lineColor: props.createChart.downColor,
      topColor: props.createChart.downColor,
      bottomColor: props.createChart.downLightColor,
    })

    leftDeptRef.current.setData(leftData)
    rightDeptRef.current.setData(rightData)
    chartRef.current.timeScale().fitContent()

    let toolTipWidth = 100
    let toolTipHeight = 80
    let toolTipMargin = 15

    let toolTip = document.createElement('div')
    toolTip.className = 'dept-floating-tooltip'
    document.getElementById('chart')?.appendChild(toolTip)

    // update tooltip
    chartRef.current.subscribeCrosshairMove(function (param: any) {
      if (
        !param.time ||
        param.point.x < 0 ||
        param.point.x > deptRef.current.clientWidth ||
        param.point.y < 0 ||
        param.point.y > deptRef.current.clientHeight
      ) {
        toolTip.style.display = 'none'
        return
      }

      let dateStr = param.time
      toolTip.style.display = 'block'
      let leftCount = param.seriesPrices.get(leftDeptRef.current)
      let rightCount = param.seriesPrices.get(rightDeptRef.current)
      // eslint-disable-next-line no-useless-concat
      toolTip.innerHTML = `<div>${dateStr}</div>` + `${'<div style="marginTop: 4px">'}${leftCount || rightCount}</div>`

      let y = param.point.y

      let left = param.point.x + toolTipMargin
      if (left > deptRef.current.clientWidth - toolTipWidth) {
        left = param.point.x - toolTipMargin - toolTipWidth
      }

      let top = y + toolTipMargin
      if (top > deptRef.current.clientHeight - toolTipHeight) {
        top = y - toolTipHeight - toolTipMargin
      }

      toolTip.style.left = `${left}px`
      toolTip.style.top = `${top}px`
    })
  }, [])

  return <div ref={deptRef} className="chart" id="chart"></div>
}

DeptRealChart.displayName = 'deptChart'

export default DeptRealChart
