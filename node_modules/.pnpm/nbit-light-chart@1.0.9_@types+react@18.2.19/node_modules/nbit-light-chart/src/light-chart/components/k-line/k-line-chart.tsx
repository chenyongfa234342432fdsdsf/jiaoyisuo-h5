import dayjs from 'dayjs'
import {
  createChart,
  DeepPartial,
  CandlestickStyleOptions,
  LineStyle,
  BarPrices,
  ISeriesApi,
  LineData,
  CandlestickData,
  HistogramData,
} from 'lightweight-charts/dist/lightweight-charts.esm.development'
import React, { useEffect, useRef, useState } from 'react'
import classNames from 'classnames'
import { calculateSMA, calculateMACD } from '../../util/indicator'
import { KLineChartData, MainIndicatorType, SubIndicatorType } from './k-line'
import { ChartLayoutOptionsType } from './k-line'

type SN = string | number
interface MainKType {
  time: SN
  open: SN
  high: SN
  low: SN
  close: SN
  isUp: boolean
}

interface MAType {
  ma: number
}

interface CreateChartType {
  brandColor: string
  upColor: string
  downColor: string
}

interface PropsType {
  data: Array<KLineChartData>
  mainIndicator: MainIndicatorType
  subIndicator: SubIndicatorType
  createChart: CreateChartType
  chartLayoutOptions: ChartLayoutOptionsType
}

interface SubKType {
  dea: BarPrices | undefined
  dif: BarPrices | undefined
  macd: BarPrices | undefined
}

type IChartApi = ReturnType<typeof createChart>

const KLineChart = (props: PropsType) => {
  const chartRef = useRef<IChartApi | null>(null)
  const candlestickSeriesRef = useRef<ISeriesApi<'Candlestick'> | null>(null)
  const volumeSeriesRef = useRef<ISeriesApi<'Histogram'> | null>(null)
  const smaLineRef = useRef<ISeriesApi<'Line'> | null>(null)
  const deaRef = useRef<ISeriesApi<'Line'> | null>(null)
  const difRef = useRef<ISeriesApi<'Line'> | null>(null)

  const checkIsUp = (value): boolean => {
    return value?.close > value?.open
  }

  let _ma = 0
  let _mainK: MainKType = {
    ...props.data[props.data.length - 1],
    time: dayjs(props.data[props.data.length - 1].time).format('YY-MM-DD HH:mm'),
    isUp: checkIsUp(props.data[props.data.length - 1]),
  }

  let _subK: SubKType = {
    dea: undefined,
    dif: undefined,
    macd: undefined,
  }

  if (props.mainIndicator.checked) {
    const { strip, type } = props.mainIndicator.sub
    let smaData = calculateSMA(props.data, Number(strip), type)
    _ma = smaData[smaData.length - 1].value
  }

  if (props.subIndicator.checked) {
    const { difChecked, deaChecked, macdChecked, fast, slow, signal } = props.subIndicator.sub

    const newData = calculateMACD(props.data, Number(fast), Number(slow), Number(signal))
    if (difChecked) {
      _subK.dif = newData[newData.length - 1].dif as unknown as BarPrices
    }
    if (deaChecked) {
      _subK.dea = newData[newData.length - 1].dea as unknown as BarPrices
    }
    if (macdChecked) {
      _subK.macd = newData[newData.length - 1].value as unknown as BarPrices
    }
  }

  // const may
  const [maIndicator, setMaIndicator] = useState<MAType>({
    ma: _ma,
  })

  const [mainK, setMainK] = useState<MainKType>(_mainK)

  const [subK, setSubK] = useState<SubKType>(_subK)

  useEffect(() => {
    chartRef.current = createChart(document.getElementById('chart') as HTMLElement, {
      layout: props.chartLayoutOptions,
      timeScale: {
        tickMarkFormatter: item => {
          return dayjs(item).format('YYYY-MM-DD HH:mm')
        },
      },
      rightPriceScale: {
        scaleMargins: {
          top: 0.0,
          bottom: 0.0,
        },
      },
    })
    candlestickSeriesRef.current = chartRef.current.addCandlestickSeries({
      upColor: props?.createChart?.upColor || '#26a69a', // 涨
      downColor: props?.createChart?.downColor || '#ef5350', // 跌
      borderVisible: false,
      wickUpColor: props?.createChart?.upColor || '#26a69a',
      wickDownColor: props?.createChart?.downColor || '#ef5350',
      priceScaleId: 'candledtick',
    } as DeepPartial<CandlestickStyleOptions>)

    smaLineRef.current = chartRef.current.addLineSeries({
      color: props.createChart.brandColor,
      lineWidth: 2,
      lineStyle: LineStyle.Solid,
      priceScaleId: 'candledtick',
    }) as ISeriesApi<'Line'>

    candlestickSeriesRef.current.setData(props.data as CandlestickData[])

    chartRef.current.timeScale().fitContent()

    chartRef.current.subscribeCrosshairMove(param => {
      const time = param.time

      if (param.time === undefined) {
        setMaIndicator({
          ma: _ma,
        })

        setMainK(_mainK)

        setSubK(_subK)
      } else {
        const volumeSeriesData = volumeSeriesRef.current
          ? param.seriesPrices.get(volumeSeriesRef.current as ISeriesApi<'Histogram'>)
          : undefined
        const chartData = candlestickSeriesRef.current
          ? param.seriesPrices.get(candlestickSeriesRef.current as ISeriesApi<'Candlestick'>)
          : {}
        const smaLine = smaLineRef.current ? param.seriesPrices.get(smaLineRef.current as ISeriesApi<'Line'>) : 0

        const dif = difRef.current ? param.seriesPrices.get(difRef.current as ISeriesApi<'Line'>) : undefined
        const dea = deaRef.current ? param.seriesPrices.get(deaRef.current as ISeriesApi<'Line'>) : undefined
        console.log('smaLine', smaLine)

        setMaIndicator({
          ma: smaLine as number,
        })

        setMainK({
          time: dayjs(time as number).format('YYYY-MM-DD HH:mm'),
          open: (chartData as BarPrices)?.open,
          close: (chartData as BarPrices)?.close,
          high: (chartData as BarPrices)?.high,
          low: (chartData as BarPrices)?.low,
          isUp: checkIsUp(chartData),
        })

        setSubK({
          macd: volumeSeriesData as BarPrices,
          dea: dea as BarPrices,
          dif: dif as BarPrices,
        })
      }
    })
  }, [])

  useEffect(() => {
    console.log('props.data----', props.data)
    if (candlestickSeriesRef.current && chartRef.current) {
      if (props.mainIndicator.checked && props.mainIndicator.sub.checked) {
        const { strip, type } = props.mainIndicator.sub
        let smaData = calculateSMA(props.data, Number(strip), type)

        smaLineRef.current.setData(smaData as LineData[])
      }

      candlestickSeriesRef.current.setData(props.data as CandlestickData[])

      if (props.subIndicator.checked) {
        const { difChecked, deaChecked, macdChecked, fast, slow, signal } = props.subIndicator.sub

        const newData = calculateMACD(props.data, Number(fast), Number(slow), Number(signal))

        const difData = newData.map(item => {
          return {
            time: item.time,
            value: item.dif,
          }
        })

        const deaData = newData.map(item => {
          return {
            time: item.time,
            value: item.dea,
          }
        })

        const macdData = newData.map(item => {
          return {
            time: item.time,
            value: item.value,
            color: item.value < 0 ? props.createChart.downColor : props.createChart.upColor,
          }
        })

        console.log('difData', difData)
        console.log('deaData', deaData)
        console.log('macdData', macdData)

        const subLineConfig = {
          color: props.createChart.brandColor,
          lineWidth: 2,
          lineStyle: LineStyle.Solid,
          priceScaleId: 'volume',
          scaleMargins: {
            top: 0.7,
            bottom: 0.1,
          },
        }
        if (!difRef.current) {
          difRef.current = chartRef.current?.addLineSeries({
            ...subLineConfig,
          }) as ISeriesApi<'Line'>
        }

        if (!deaRef.current) {
          deaRef.current = chartRef.current?.addLineSeries({
            ...subLineConfig,
          }) as ISeriesApi<'Line'>
        }

        if (!volumeSeriesRef.current) {
          volumeSeriesRef.current = chartRef.current?.addHistogramSeries({
            color: props.createChart.upColor,
            priceFormat: {
              type: 'price',
            },
            priceScaleId: 'volume',
            scaleMargins: {
              top: 0.7,
              bottom: 0.1,
            },
          }) as ISeriesApi<'Histogram'>
        }

        difRef.current.setData((difChecked ? difData : []) as LineData[])
        deaRef.current.setData((deaChecked ? deaData : []) as LineData[])
        volumeSeriesRef.current.setData((macdChecked ? macdData : []) as HistogramData[])
      }
    }
  }, [props.data, props.mainIndicator, props.subIndicator])

  useEffect(() => {
    if (candlestickSeriesRef.current) {
      if (props.subIndicator.checked) {
        candlestickSeriesRef.current.applyOptions({
          scaleMargins: {
            top: 0.1,
            bottom: 0.5,
          },
        })
      } else {
        candlestickSeriesRef.current.applyOptions({
          scaleMargins: {
            top: 0,
            bottom: 0,
          },
        })
      }
    }

    if (smaLineRef.current) {
      if (props.subIndicator.checked) {
        smaLineRef.current.applyOptions({
          scaleMargins: {
            top: 0.1,
            bottom: 0.5,
          },
        })
      } else {
        smaLineRef.current.applyOptions({
          scaleMargins: {
            top: 0,
            bottom: 0,
          },
        })
      }
    }
  }, [props.subIndicator.checked])

  return (
    <div className="chart" id="chart">
      <div className="k-data text-text_color_03">
        <span>{mainK.time}</span>
        <span className="ml-2">
          Open:{' '}
          <span
            className={classNames({
              'text-buy_up_color': mainK.isUp,
              'text-sell_down_color': !mainK.isUp,
            })}
          >
            {mainK.open}
          </span>
        </span>
        <span className="ml-2">
          Hign:{' '}
          <span
            className={classNames({
              'text-buy_up_color': mainK.isUp,
              'text-sell_down_color': !mainK.isUp,
            })}
          >
            {mainK.high}
          </span>
        </span>
        <span className="ml-2">
          Low:{' '}
          <span
            className={classNames({
              'text-buy_up_color': mainK.isUp,
              'text-sell_down_color': !mainK.isUp,
            })}
          >
            {mainK.low}
          </span>
        </span>
        <span className="ml-2">
          Close:{' '}
          <span
            className={classNames({
              'text-buy_up_color': mainK.isUp,
              'text-sell_down_color': !mainK.isUp,
            })}
          >
            {mainK.close}
          </span>
        </span>
      </div>
      {props.mainIndicator.checked ? (
        <div className="ma text-text_color_03">
          <span>
            {`MA(${props.mainIndicator.sub.strip}):`}
            <span className="text-brand_color">{maIndicator.ma}</span>
          </span>
        </div>
      ) : null}
      {props.subIndicator.checked ? (
        <div className="macd text-text_color_03">
          <span>{`MACD(${props.subIndicator.sub.fast}, ${props.subIndicator.sub.slow}, ${props.subIndicator.sub.signal})`}</span>
          {props.subIndicator.sub.deaChecked && <span className="ml-2">{subK.dea}</span>}
          {props.subIndicator.sub.difChecked && <span className="ml-2">{subK.dif}</span>}
          {props.subIndicator.sub.macdChecked && <span className="ml-2">{subK.macd}</span>}
        </div>
      ) : null}
    </div>
  )
}

export default KLineChart
