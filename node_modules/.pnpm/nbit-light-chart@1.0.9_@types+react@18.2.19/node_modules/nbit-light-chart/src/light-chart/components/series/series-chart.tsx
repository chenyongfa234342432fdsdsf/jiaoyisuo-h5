import dayjs from 'dayjs'
import { createChart, PriceScaleMode } from 'lightweight-charts'
import React, { useEffect, useRef } from 'react'
import { SeriesChartData } from './series'

export interface PropsType {
  data: Array<SeriesChartData>
  chartLayoutOptions: any
  createChart: {
    brandColor: string
  }
}

const SeriesChart = (props: PropsType) => {
  const lineRef = useRef<any>(null)
  const chartRef = useRef<any>(null)

  useEffect(() => {
    if (chartRef.current) {
      chartRef.current.setData(props.data)
    }
  }, [props.data])

  useEffect(() => {
    const chart = createChart(document.getElementById('chart') as HTMLElement, {
      layout: props.chartLayoutOptions,
      timeScale: {
        timeVisible: true,
        secondsVisible: false,
        tickMarkFormatter: time => {
          const _time = dayjs(time).format('YY-MM-DD HH:MM')
          if (_time.split(' ')[1].split(':')[0] !== '00') {
            return ''
          }
          return dayjs(time).format('YY-MM-DD HH:MM')
        },
      },
      rightPriceScale: {
        mode: PriceScaleMode.Percentage,
      },
      // 布局相关
      // crosshair: {
      //   horzLine: {
      //     visible: false,
      //     labelVisible: false,
      //   },
      //   vertLine: {
      //     visible: true,
      //     labelVisible: false,
      //   },
      // },
      grid: {
        vertLines: {
          visible: false,
        },
      },
    })

    // #f1ae3d
    chartRef.current = chart.addLineSeries({ color: props?.createChart?.brandColor })

    chartRef.current.setData(props.data)

    chart.timeScale().fitContent()

    let toolTipWidth = 100
    let toolTipHeight = 80
    let toolTipMargin = 15

    let toolTip = document.createElement('div')
    toolTip.className = 'series-floating-tooltip'
    document.getElementById('chart')?.appendChild(toolTip)

    // update tooltip
    chart.subscribeCrosshairMove(function (param: any) {
      if (
        !param.time ||
        param.point.x < 0 ||
        param.point.x > lineRef.current.clientWidth ||
        param.point.y < 0 ||
        param.point.y > lineRef.current.clientHeight
      ) {
        toolTip.style.display = 'none'
        return
      }

      let dateStr = dayjs(param.time).format('MM-DD HH:MM')
      toolTip.style.display = 'block'
      let price = param.seriesPrices.get(chartRef.current)
      // eslint-disable-next-line no-useless-concat
      toolTip.innerHTML = `<div>${dateStr}</div>` + `${'<div style="marginTop: 4px">'}${price}%</div>`

      let y = param.point.y

      let left = param.point.x + toolTipMargin
      if (left > lineRef.current.clientWidth - toolTipWidth) {
        left = param.point.x - toolTipMargin - toolTipWidth
      }

      let top = y + toolTipMargin
      if (top > lineRef.current.clientHeight - toolTipHeight) {
        top = y - toolTipHeight - toolTipMargin
      }

      toolTip.style.left = `${left}px`
      toolTip.style.top = `${top}px`
    })
  }, [])

  return <div ref={lineRef} className="chart" id="chart"></div>
}

SeriesChart.displayName = 'Series'

export default SeriesChart
