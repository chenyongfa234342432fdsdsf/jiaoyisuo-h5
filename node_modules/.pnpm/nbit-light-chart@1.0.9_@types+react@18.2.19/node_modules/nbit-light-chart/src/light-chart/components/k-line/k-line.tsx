import { Button, Checkbox, Input, Modal, Select, Tabs } from 'nbit-arco'
import React, { useEffect, useState, memo } from 'react'
import dayjs from 'dayjs'
import customParseFormat from 'dayjs/plugin/customParseFormat'
import isBetween from 'dayjs/plugin/isBetween'
import { IconRight } from 'nbit-arco/icon'
import classNames from 'classnames'
import { updateTimeOfData } from '../../util/indicator'
import './k-line.css'

import KLineChart from './k-line-chart'
import { getTheme } from '../../util/theme'

export interface KLineChartData {
  time: number
  open: number
  high: number
  low: number
  close: number
  [key: string]: any
}

export interface PropsType {
  kLineChartData: Array<KLineChartData>
  theme: string
}

const TabPane = Tabs.TabPane
dayjs.extend(customParseFormat)
dayjs.extend(isBetween)

export enum TimeSharingType {
  Min = 'min',
  Hour = 'hour',
  Week = 'week',
  Mon = 'mon',
}

export interface SwitchTimeType {
  unit: string
  value: string | number
}

interface MainSubType {
  checked: boolean
  strip: string
  type: string
  color: string
}

interface SubType {
  fast: string
  slow: string
  signal: string
  deaChecked: boolean
  difChecked: boolean
  macdChecked: boolean
}

export interface MainIndicatorType {
  checked: boolean
  sub: MainSubType
}

export interface SubIndicatorType {
  checked: boolean
  sub: SubType
}

interface BackgroundType {
  color: string
}

export interface ChartLayoutOptionsType {
  background: BackgroundType
  textColor: string
}

const Option = Select.Option

const KLine = (props: PropsType) => {
  const { bgColor, textColor, brandColor, upColor, downColor } = getTheme()

  const [visible, setVisible] = useState<boolean>(false)
  const [curData, setCurData] = useState<Array<KLineChartData>>(props?.kLineChartData)
  const [mainIndicator, setMainIndicator] = useState<MainIndicatorType>({
    checked: true,
    sub: {
      checked: true,
      strip: '1',
      type: 'high',
      color: brandColor,
    },
  })

  const [subIndicator, setSubIndicator] = useState<SubIndicatorType>({
    checked: false,
    sub: {
      fast: '12',
      slow: '26',
      signal: '1',
      deaChecked: false,
      difChecked: false,
      macdChecked: false,
    },
  })

  const [curTime, setCurTime] = useState<SwitchTimeType>({
    unit: 'min',
    value: 1,
  })

  useEffect(() => {
    if (props.kLineChartData) {
      setCurData(props.kLineChartData)
    }
  }, [props.kLineChartData])

  const [chartLayoutOptions, setChartLayoutOptions] = useState<ChartLayoutOptionsType>({
    background: {
      color: bgColor,
    },
    textColor,
  })

  useEffect(() => {
    const _bgColor = getTheme().bgColor
    const _textColor = getTheme().textColor
    setChartLayoutOptions({
      background: {
        color: _bgColor,
      },
      textColor: _textColor,
    })
  }, [props.theme])

  const minutesList = [1, 3, 5, 15, 30]
  const dayList = [1, 2, 4, 6, 12]

  const timeSharingChange = (value, type) => {
    setCurTime({
      unit: type,
      value,
    })
    const _newData = updateTimeOfData(value, type, props?.kLineChartData || [])
    setCurData(_newData)
  }

  const updateTecIndicator = () => {
    setVisible(true)
  }

  const closeModal = () => {
    setVisible(false)
  }

  const confirm = () => {
    setVisible(false)
  }

  const mainCheckboxChange = value => {
    setMainIndicator({
      ...mainIndicator,
      checked: value,
    })
  }

  const subMainCheckboxChange = value => {
    setSubIndicator({
      ...subIndicator,
      checked: value,
    })
  }

  const mainSubCheckboxChange = value => {
    setMainIndicator({
      ...mainIndicator,
      sub: {
        ...mainIndicator.sub,
        checked: value,
      },
    })
  }

  const indicatorSelectChange = value => {
    setMainIndicator({
      ...mainIndicator,
      sub: {
        ...mainIndicator.sub,
        type: value,
      },
    })
  }

  const indicatorInputChange = value => {
    setMainIndicator({
      ...mainIndicator,
      sub: {
        ...mainIndicator.sub,
        strip: value,
      },
    })
  }

  const subInputChange = (value, type) => {
    setSubIndicator({
      ...subIndicator,
      sub: {
        ...subIndicator.sub,
        [type]: value,
      },
    })
  }

  const subCheckboxChange = (value, type) => {
    setSubIndicator({
      ...subIndicator,
      sub: {
        ...subIndicator.sub,
        [type]: value,
      },
    })
  }

  const options = [
    {
      value: 'High',
    },
    {
      value: 'Low',
    },
    {
      value: 'Open',
    },
    {
      value: 'Close',
    },
  ]

  return (
    <div className="k-line-chart-wrap bg-bg_color">
      <div className="k-set-wrap">
        <Select
          style={{ width: 64 }}
          defaultValue={minutesList[0]}
          onChange={value => {
            timeSharingChange(value, TimeSharingType.Min)
          }}
          className="bg-bg_sr_color"
        >
          {minutesList.map(option => (
            <Option key={option} value={option}>
              <span
                className={classNames({
                  'text-brand_color': option === curTime.value && curTime.unit === TimeSharingType.Min,
                })}
              >
                {option}分
              </span>
            </Option>
          ))}
        </Select>
        <Select
          className="ml-4"
          style={{ width: 64 }}
          defaultValue={dayList[0]}
          onChange={value => {
            timeSharingChange(value, TimeSharingType.Hour)
          }}
        >
          {dayList.map(option => (
            <Option key={option} value={option}>
              <span
                className={classNames({
                  'text-brand_color': option === curTime.value && curTime.unit === TimeSharingType.Hour,
                })}
              >
                {option}时
              </span>
            </Option>
          ))}
        </Select>
        <Button className={`ml-4`} onClick={() => timeSharingChange(1, TimeSharingType.Week)}>
          <span
            className={classNames({
              'text-brand_color': curTime.value === 1 && curTime.unit === TimeSharingType.Week,
              'text-text_color_01': curTime.value !== 1 || curTime.unit !== TimeSharingType.Week,
            })}
          >{`一周`}</span>
        </Button>
        <Button className={`ml-4`} onClick={() => timeSharingChange(1, TimeSharingType.Mon)}>
          <span
            className={classNames({
              'text-brand_color': curTime.value === 1 && curTime.unit === TimeSharingType.Mon,
              'text-text_color_01': curTime.value !== 1 || curTime.unit !== TimeSharingType.Mon,
            })}
          >{`一个月`}</span>
        </Button>
        <Button className="ml-4 text-text_color_01" onClick={updateTecIndicator}>{`技术指标`}</Button>
      </div>
      <Modal
        style={{ width: 600 }}
        footer={
          <div className="footer-wrap">
            <Button onClick={closeModal} className="processing-button">{`取消`}</Button>
            <Button onClick={confirm} className="processing-button ml-4" type="primary">{`确定`}</Button>
          </div>
        }
        title="Indicators"
        visible={visible}
        onCancel={() => {
          closeModal()
        }}
      >
        <div className="modal-wrap">
          <Tabs defaultActiveTab="1">
            <TabPane key="1" title="Main">
              <div className="main-wrap">
                <div className="main">
                  <div>Main</div>
                  <div className="mt-4">
                    <Checkbox checked={mainIndicator.checked} onChange={mainCheckboxChange} />
                    <span className="ml-2">MA</span>
                    <IconRight className="ml-12" />
                  </div>
                </div>
                <div>
                  <div>MA - Moving Average</div>
                  <div className="mt-3">
                    <Checkbox checked={mainIndicator.sub.checked} onChange={mainSubCheckboxChange} />
                    <span className="ml-2">MA1</span>
                    <Input
                      style={{ width: 48 }}
                      className="ml-4"
                      value={mainIndicator.sub.strip}
                      allowClear
                      placeholder="Please Enter something"
                      onChange={indicatorInputChange}
                    />
                    <Select
                      placeholder="Please select"
                      className="ml-4"
                      value={mainIndicator.sub.type}
                      style={{ width: 120 }}
                      onChange={indicatorSelectChange}
                    >
                      {options.map(option => (
                        <Option key={option.value} value={option.value}>
                          {option.value}
                        </Option>
                      ))}
                    </Select>
                  </div>
                </div>
              </div>
            </TabPane>
            <TabPane key="2" title="Sub">
              <div className="sub-wrap">
                <div className="sub">
                  <div>Sub</div>
                  <div className="mt-4">
                    <Checkbox checked={subIndicator.checked} onChange={subMainCheckboxChange} />
                    <span className="ml-2">MACD</span>
                    <IconRight className="ml-12" />
                  </div>
                </div>
                <div>
                  <div>Moving Average Convergence Divergence</div>
                  <div className="mt-3 sub-set">
                    <div className="set-item">
                      <span>Fast Length</span>
                      <Input
                        style={{ width: 120 }}
                        className="ml-4"
                        value={subIndicator.sub.fast}
                        allowClear
                        placeholder="Please Enter something"
                        onChange={value => {
                          subInputChange(value, 'fast')
                        }}
                      />
                    </div>
                    <div className="set-item">
                      <span>Slow Length</span>
                      <Input
                        style={{ width: 120 }}
                        className="ml-4"
                        value={subIndicator.sub.slow}
                        allowClear
                        placeholder="Please Enter something"
                        onChange={value => {
                          subInputChange(value, 'slow')
                        }}
                      />
                    </div>
                    <div className="set-item">
                      <span>Signal Length</span>
                      <Input
                        style={{ width: 120 }}
                        className="ml-4"
                        value={subIndicator.sub.signal}
                        allowClear
                        placeholder="Please Enter something"
                        onChange={value => {
                          subInputChange(value, 'signal')
                        }}
                      />
                    </div>
                    <div>
                      <Checkbox
                        checked={subIndicator.sub.deaChecked}
                        onChange={value => {
                          subCheckboxChange(value, 'deaChecked')
                        }}
                      >
                        DEA
                      </Checkbox>
                    </div>
                    <div>
                      <Checkbox
                        checked={subIndicator.sub.difChecked}
                        onChange={value => {
                          subCheckboxChange(value, 'difChecked')
                        }}
                      >
                        DIF
                      </Checkbox>
                    </div>
                    <div>
                      <Checkbox
                        checked={subIndicator.sub.macdChecked}
                        onChange={value => {
                          subCheckboxChange(value, 'macdChecked')
                        }}
                      >
                        MACD
                      </Checkbox>
                    </div>
                    {/* <Checkbox checked={mainIndicator.sub.checked} onChange={subCheckboxChange} />
                    <Select
                      placeholder="Please select"
                      className="ml-4"
                      value={mainIndicator.sub.type}
                      style={{ width: 120 }}
                      onChange={indicatorSelectChange}
                    >
                      {options.map((option, index) => (
                        <Option key={option.id} value={option.id}>
                          {option.value}
                        </Option>
                      ))}
                    </Select> */}
                  </div>
                </div>
              </div>
            </TabPane>
          </Tabs>
        </div>
      </Modal>
      <div className={`chart-wrap mt-8 ${subIndicator.checked ? 'have-sub' : 'not-sub'}`}>
        <KLineChart
          chartLayoutOptions={chartLayoutOptions}
          data={curData}
          createChart={{ brandColor, upColor, downColor }}
          mainIndicator={mainIndicator}
          subIndicator={subIndicator}
        />
      </div>
    </div>
  )
}

KLine.displayName = 'KLine'

export default memo(KLine)
