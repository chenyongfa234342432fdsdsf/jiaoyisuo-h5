import dayjs from 'dayjs'
import { KLineChartData, TimeSharingType } from '../components/k-line/k-line'

interface SMAType {
  time: number
  value: number
}

/**
 * 计算 SMA
 */

const calculateSMA = (data: any, count: number, price: string): Array<SMAType> => {
  let result: Array<SMAType> = []
  let avg = data => {
    let sum = 0
    for (let i = 0; i < data.length; i += 1) {
      sum += data[i][price]
    }
    return sum / data.length
  }

  for (let i = count - 1, len = data.length; i < len; i += 1) {
    let val = avg(data.slice(i - count + 1, i + 1))
    if (i - count + 1 === 0) {
      for (let j = 0; j < count; j += 1) {
        result.push({ time: data[j].time, value: val })
      }
    } else {
      result.push({ time: data[i].time, value: val })
    }
  }
  return result
}

/**
 * 计算EMA
 * // ema 上一日
 * // price 价格,dif
 * // period 日期
 */
const calculateEMA = (ema: number, price: number, period: number): number => {
  return (2 * price + (period - 1) * ema) / (period + 1)
}

interface CalMacdType {
  emaFast: number
  emaSlow: number
  dif: number
  dea: number
  value: number
  time: number
}

/**
 * 计算 MACD
 * fast 快线
 * slow 慢线
 * signal 日期
 */
const calculateMACD = (data, fast: number, slow: number, signal: number): Array<CalMacdType> => {
  const newData: any = []
  data.forEach((item, index) => {
    let emaFast = 0
    let emaSlow = 0
    let dea = 0
    let dif = 0
    if (index < fast - 1) {
      emaFast = 0
    } else {
      emaFast = calculateEMA(newData[index - 1]?.emaFast || 0, item.close, fast)
    }

    if (index < slow - 1) {
      emaSlow = 0
    } else {
      emaSlow = calculateEMA(newData[index - 1]?.emaSlow || 0, item.close, slow)
    }

    dif = emaFast - emaSlow
    if (index < signal - 1) {
      dea = 0
    } else {
      dea = calculateEMA(newData[index - 1]?.dea || 0, dif, signal)
    }

    newData.push({
      emaFast,
      emaSlow,
      dif,
      dea,
      value: (dif - dea) * 2,
      time: item.time,
    })
  })
  return newData
}

const updateTimeOfData = (
  value: number,
  type: TimeSharingType,
  kLineChartData: Array<KLineChartData>
): Array<KLineChartData> => {
  const timeList = kLineChartData.map((item, index) => {
    return {
      index,
      time: dayjs(item.time).format('YYYY-MM-DD HH:mm'),
    }
  })
  const newData: Array<KLineChartData> = []
  if (type === TimeSharingType.Min) {
    let i = 0
    while (i < timeList.length) {
      const min = Number(timeList[i].time.split(' ')[1].split(':')[1])
      if (min === 0 || min % value === 0) {
        newData.push({
          ...kLineChartData[i],
        })
        i += 1
      } else {
        const remainder = min % value
        let tempIndex = remainder
        const tempObj: any = {}
        while (tempIndex <= value && i < timeList.length) {
          if (!tempObj.low) {
            tempObj.low = kLineChartData[i].low
          } else {
            if ((kLineChartData[i].low as number) < tempObj.low) {
              tempObj.low = kLineChartData[i].low
            }
          }
          if (!tempObj.high) {
            tempObj.high = kLineChartData[i].high
          } else {
            if ((kLineChartData[i].high as number) > tempObj.high) {
              tempObj.high = kLineChartData[i].high
            }
          }
          if (tempIndex === remainder) {
            tempObj.open = kLineChartData[i].open
          }
          tempObj.close = kLineChartData[i].close
          tempIndex += 1
          i += 1
          if (i === timeList.length) {
            tempObj.time = kLineChartData[i - 1].time + 1000 * 60 * (value - tempIndex + 1)
          } else {
            tempObj.time = kLineChartData[i - 1].time
          }
        }
        newData.push({
          ...tempObj,
        })
      }
    }
  }
  if (type === TimeSharingType.Hour) {
    let i = 0
    while (i < timeList.length) {
      const hour = Number(timeList[i].time.split(' ')[1].split(':')[0])
      const min = Number(timeList[i].time.split(' ')[1].split(':')[1])
      if (min === 0 && hour % value === 0) {
        newData.push({
          ...kLineChartData[i],
        })
        i += 1
      } else {
        const remainder = hour % value
        let tempIndex = remainder * 60 + min
        const _tempIndex = tempIndex
        const tempObj: any = {}
        while (tempIndex <= value * 60 && i < timeList.length) {
          if (!tempObj.low) {
            tempObj.low = kLineChartData[i].low
          } else {
            if ((kLineChartData[i].low as number) < tempObj.low) {
              tempObj.low = kLineChartData[i].low
            }
          }
          if (!tempObj.high) {
            tempObj.high = kLineChartData[i].high
          } else {
            if ((kLineChartData[i].high as number) > tempObj.high) {
              tempObj.high = kLineChartData[i].high
            }
          }
          if (tempIndex === _tempIndex) {
            tempObj.open = kLineChartData[i].open
          }

          tempObj.close = kLineChartData[i].close

          tempIndex += 1
          i += 1

          if (i === timeList.length) {
            tempObj.time = kLineChartData[i - 1].time + 1000 * 60 * (value * 60 - tempIndex + 1)
          } else {
            tempObj.time = kLineChartData[i - 1].time
          }
        }
        newData.push({
          ...tempObj,
        })
      }
    }
  }

  if (type === TimeSharingType.Week) {
    let i = 0
    while (i < timeList.length) {
      const date = timeList[i].time.split(' ')[0]
      const dayOfWeek = dayjs(kLineChartData[i].time).day()
      const _tempIndex = i
      const newDate =
        dayOfWeek === 7
          ? timeList[i].time.split(' ')[0]
          : dayjs(timeList[i].time.split(' ')[0])
              .add(7 - dayOfWeek, 'day')
              .format('YYYY-MM-DD')
      const tempObj: any = {}

      let tempDate = date
      while (dayjs(tempDate).isBetween(date, newDate, null, '[]') && i < timeList.length) {
        if (!tempObj.low) {
          tempObj.low = kLineChartData[i].low
        } else {
          if ((kLineChartData[i].low as number) < tempObj.low) {
            tempObj.low = kLineChartData[i].low
          }
        }
        if (!tempObj.high) {
          tempObj.high = kLineChartData[i].high
        } else {
          if ((kLineChartData[i].high as number) > tempObj.high) {
            tempObj.high = kLineChartData[i].high
          }
        }
        if (_tempIndex === i) {
          tempObj.open = kLineChartData[i].open
        }

        tempObj.close = kLineChartData[i].close

        i += 1
        tempObj.time = dayjs(newDate).valueOf()

        if (i !== timeList.length) {
          tempDate = timeList[i].time.split(' ')[0]
        }
      }
      newData.push({
        ...tempObj,
      })
    }
  }

  if (type === TimeSharingType.Mon) {
    let i = 0
    while (i < timeList.length) {
      const year = Number(timeList[i].time.split(' ')[0].split('-')[0])
      const mon = Number(timeList[i].time.split(' ')[0].split('-')[1])
      const remainder = mon % value
      let tempMon = mon
      let tempYear = year
      const _tempIndex = i
      const tempObj: any = {}
      while (tempMon === mon && tempYear === year && i < timeList.length) {
        if (!tempObj.low) {
          tempObj.low = kLineChartData[i].low
        } else {
          if ((kLineChartData[i].low as number) < tempObj.low) {
            tempObj.low = kLineChartData[i].low
          }
        }
        if (!tempObj.high) {
          tempObj.high = kLineChartData[i].high
        } else {
          if ((kLineChartData[i].high as number) > tempObj.high) {
            tempObj.high = kLineChartData[i].high
          }
        }
        if (_tempIndex === i) {
          tempObj.open = kLineChartData[i].open
        }
        tempObj.close = kLineChartData[i].close
        i += 1
        if (
          Number(timeList[i === timeList.length ? i - 1 : i].time.split(' ')[0].split('-')[0]) !== tempYear ||
          Number(timeList[i === timeList.length ? i - 1 : i].time.split(' ')[0].split('-')[1]) !== tempMon
        ) {
          tempYear = Number(timeList[i === timeList.length ? i - 1 : i].time.split(' ')[0].split('-')[0])
          tempMon = Number(timeList[i === timeList.length ? i - 1 : i].time.split(' ')[0].split('-')[1])
        }
        if (i === timeList.length) {
          tempObj.time = dayjs(
            `${tempMon + value - remainder > 12 ? tempYear + 1 : tempYear}-${
              tempMon + value - remainder > 12 ? tempMon + value - remainder - 12 : tempMon + value - remainder
            }-1`
          ).valueOf()
        } else {
          tempObj.time = kLineChartData[i - 1].time
        }
      }
      newData.push({
        ...tempObj,
      })
    }
  }
  return newData
}

export { calculateSMA, calculateMACD, calculateEMA, updateTimeOfData }
